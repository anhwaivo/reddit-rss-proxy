<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/r/LocalLLaMA/.rss</id>
  <title>LocalLlama</title>
  <updated>2025-04-26T15:05:22+00:00</updated>
  <link href="https://old.reddit.com/r/LocalLLaMA/" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <icon>https://www.redditstatic.com/icon.png/</icon>
  <subtitle>Subreddit to discuss about Llama, the large language model created by Meta AI.</subtitle>
  <entry>
    <id>t3_1k7k1ck</id>
    <title>No thinking, is the right way to think?</title>
    <updated>2025-04-25T12:45:32+00:00</updated>
    <author>
      <name>/u/Eralyon</name>
      <uri>https://old.reddit.com/user/Eralyon</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;&lt;a href="https://arxiv.org/abs/2504.09858"&gt;https://arxiv.org/abs/2504.09858&lt;/a&gt;&lt;/p&gt; &lt;p&gt;TLDR:&lt;br /&gt; Bypassing the thinking process, forcing the beginning of the answer by &amp;quot;Thinking: Okay, I think I have finished thinking&amp;quot; (lol), they get similar/better inference results !!!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Eralyon"&gt; /u/Eralyon &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7k1ck/no_thinking_is_the_right_way_to_think/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7k1ck/no_thinking_is_the_right_way_to_think/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k7k1ck/no_thinking_is_the_right_way_to_think/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-25T12:45:32+00:00</published>
  </entry>
  <entry>
    <id>t3_1k89jbi</id>
    <title>Rabbit - A dead simple web agent (open source)</title>
    <updated>2025-04-26T10:04:12+00:00</updated>
    <author>
      <name>/u/codemaven_</name>
      <uri>https://old.reddit.com/user/codemaven_</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k89jbi/rabbit_a_dead_simple_web_agent_open_source/"&gt; &lt;img alt="Rabbit - A dead simple web agent (open source)" src="https://external-preview.redd.it/pQNpKEFhJoGsZW-OxzrWmarNLSOg2ySt3ftHCut851E.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=fdfcd6c03aaaf031622a3a07dde126ba9b41dca6" title="Rabbit - A dead simple web agent (open source)" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi LocalLLama,&lt;/p&gt; &lt;p&gt;I built Rabbit SDK; an easy to use web agent Software Development Kit. The SDK comes with sentiment analysis and other functions. I'm using Gemini-flash 2.0. as the default model and want to include an open source model like Llama. I'm asking for feedback on the project. &lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/codemaven_"&gt; /u/codemaven_ &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://github.com/wchisasa/rabbit"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k89jbi/rabbit_a_dead_simple_web_agent_open_source/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k89jbi/rabbit_a_dead_simple_web_agent_open_source/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T10:04:12+00:00</published>
  </entry>
  <entry>
    <id>t3_1k7ue47</id>
    <title>Trained the tiny stories dataset on a 12M parameter model.</title>
    <updated>2025-04-25T20:02:05+00:00</updated>
    <author>
      <name>/u/Slaghton</name>
      <uri>https://old.reddit.com/user/Slaghton</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7ue47/trained_the_tiny_stories_dataset_on_a_12m/"&gt; &lt;img alt="Trained the tiny stories dataset on a 12M parameter model." src="https://preview.redd.it/qnx9gqc671xe1.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=fdcb4160b1d2416d1a24263a7cd97dc785946e9f" title="Trained the tiny stories dataset on a 12M parameter model." /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Trained a 12M Parameter model on the tiny stories dataset. &lt;/p&gt; &lt;p&gt;**GPU used is an Nvidia 4080** &lt;/p&gt; &lt;p&gt;&lt;a href="https://huggingface.co/datasets/roneneldan/TinyStories"&gt;https://huggingface.co/datasets/roneneldan/TinyStories&lt;/a&gt;&lt;/p&gt; &lt;p&gt;I played some video games while it was running off and on so it probably would've finished a bit earlier around 45 hours or so. &lt;/p&gt; &lt;p&gt;I think for smaller models, if you go past the Chinchilla Scaling Law of using 20 tokens per parameter, you can see improvements. This becomes less and less as the model is scaled up though I believe. &lt;/p&gt; &lt;p&gt;(Though maybe bigger models would actually benefit to but the compute becomes ridiculous and gains might be much lower than smaller models)&lt;/p&gt; &lt;p&gt;P.S. The stories aren't the best (lol), but they are pretty coherent. &lt;/p&gt; &lt;p&gt;Configuration info below.&lt;/p&gt; &lt;p&gt;config = LlamaConfig(&lt;/p&gt; &lt;p&gt;vocab_size=vocab_size,&lt;/p&gt; &lt;p&gt;hidden_size=384,&lt;/p&gt; &lt;p&gt;intermediate_size=768, &lt;/p&gt; &lt;p&gt;num_hidden_layers=8, &lt;/p&gt; &lt;p&gt;num_attention_heads=8, &lt;/p&gt; &lt;p&gt;max_position_embeddings=6000,&lt;/p&gt; &lt;p&gt;rms_norm_eps=1e-5,&lt;/p&gt; &lt;p&gt;initializer_range=0.02,&lt;/p&gt; &lt;p&gt;use_cache=True,&lt;/p&gt; &lt;p&gt;tie_word_embeddings=False,&lt;/p&gt; &lt;p&gt;attention_dropout=0.1,&lt;/p&gt; &lt;p&gt;hidden_dropout=0.1,&lt;/p&gt; &lt;p&gt;)&lt;/p&gt; &lt;p&gt;training_args = TrainingArguments(&lt;/p&gt; &lt;p&gt;output_dir=output_dir,&lt;/p&gt; &lt;p&gt;overwrite_output_dir=False,&lt;/p&gt; &lt;p&gt;num_train_epochs=1, &lt;/p&gt; &lt;p&gt;per_device_train_batch_size=8,&lt;/p&gt; &lt;p&gt;gradient_accumulation_steps=1,&lt;/p&gt; &lt;p&gt;save_strategy=&amp;quot;steps&amp;quot;, # Use steps for saving&lt;/p&gt; &lt;p&gt;save_steps=5000,&lt;/p&gt; &lt;p&gt;logging_strategy=&amp;quot;steps&amp;quot;, # Use steps for logging&lt;/p&gt; &lt;p&gt;logging_steps=100, # Log training loss frequently for the scheduler&lt;/p&gt; &lt;p&gt;save_total_limit=10,&lt;/p&gt; &lt;p&gt;prediction_loss_only=True, # Often True for Causal LM if not evaluating metrics like perplexity&lt;/p&gt; &lt;p&gt;learning_rate=.0008, # Initial learning rate for AdamW&lt;/p&gt; &lt;p&gt;weight_decay=.05,&lt;/p&gt; &lt;p&gt;fp16=True,&lt;/p&gt; &lt;p&gt;gradient_checkpointing=True,&lt;/p&gt; &lt;p&gt;max_grad_norm=1.0,&lt;/p&gt; &lt;p&gt;# Evaluation settings (important if using eval_loss with scheduler later)&lt;/p&gt; &lt;p&gt;evaluation_strategy=&amp;quot;steps&amp;quot; if not disable_eval else &amp;quot;no&amp;quot;,&lt;/p&gt; &lt;p&gt;eval_steps=5000 if not disable_eval else None,&lt;/p&gt; &lt;p&gt;report_to=&amp;quot;wandb&amp;quot;, # Log to W&amp;amp;B&lt;/p&gt; &lt;p&gt;)&lt;/p&gt; &lt;h1&gt;&lt;/h1&gt; &lt;p&gt;Training stats below.&lt;/p&gt; &lt;p&gt;{'train_runtime': 180146.524, 'train_samples_per_second': 35.091, 'train_steps_per_second': 4.386, 'train_loss': 0.23441845736255604, 'epoch': 3.0}&lt;/p&gt; &lt;p&gt;100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 790191/790191 [50:02:26&amp;lt;00:00, 4.39it/s]&lt;/p&gt; &lt;p&gt;2025-04-25 13:32:42,894 - INFO - Saving final model and training state...&lt;/p&gt; &lt;p&gt;***** train metrics *****&lt;/p&gt; &lt;p&gt;epoch = 3.0&lt;/p&gt; &lt;p&gt;total_flos = 711039651GF&lt;/p&gt; &lt;p&gt;train_loss = 0.2344&lt;/p&gt; &lt;p&gt;train_runtime = 2 days, 2:02:26.52&lt;/p&gt; &lt;p&gt;train_samples_per_second = 35.091&lt;/p&gt; &lt;p&gt;train_steps_per_second = 4.386&lt;/p&gt; &lt;p&gt;2025-04-25 13:32:43,067 - INFO - Training completed successfully!&lt;/p&gt; &lt;p&gt;2025-04-25 13:32:43,068 - INFO - Final model saved to: ./llama_model_test\final&lt;/p&gt; &lt;h1&gt;&lt;/h1&gt; &lt;p&gt;wandb: Run summary:&lt;/p&gt; &lt;p&gt;wandb: eval/loss 0.19124&lt;/p&gt; &lt;p&gt;wandb: eval/runtime 47.0576&lt;/p&gt; &lt;p&gt;wandb: eval/samples_per_second 225.022&lt;/p&gt; &lt;p&gt;wandb: eval/steps_per_second 28.136&lt;/p&gt; &lt;p&gt;wandb: lr 0.0&lt;/p&gt; &lt;p&gt;wandb: total_flos 7.634730128676549e+17&lt;/p&gt; &lt;p&gt;wandb: train/epoch 3&lt;/p&gt; &lt;p&gt;wandb: train/global_step 790191&lt;/p&gt; &lt;p&gt;wandb: train/grad_norm 0.22934&lt;/p&gt; &lt;p&gt;wandb: train/learning_rate 0.0&lt;/p&gt; &lt;p&gt;wandb: train/loss 0.1965&lt;/p&gt; &lt;p&gt;wandb: train_loss 0.23442&lt;/p&gt; &lt;p&gt;wandb: train_runtime 180146.524&lt;/p&gt; &lt;p&gt;wandb: train_samples_per_second 35.091&lt;/p&gt; &lt;p&gt;wandb: train_steps_per_second 4.386&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Slaghton"&gt; /u/Slaghton &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/qnx9gqc671xe1.png"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7ue47/trained_the_tiny_stories_dataset_on_a_12m/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k7ue47/trained_the_tiny_stories_dataset_on_a_12m/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-25T20:02:05+00:00</published>
  </entry>
  <entry>
    <id>t3_1k8d8a3</id>
    <title>5090 prices in Switzerland normalizing, looking good for local AI?</title>
    <updated>2025-04-26T13:41:47+00:00</updated>
    <author>
      <name>/u/Mr_Moonsilver</name>
      <uri>https://old.reddit.com/user/Mr_Moonsilver</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Have been checking 5090 prices in Switzerland. Found offers as low as CHF 1950.- although sold out very quickly and not up for order, but offer still online. The next one that's available, although with a 28 day lead time is at CHF 2291.-&lt;/p&gt; &lt;p&gt;Do you guys see this as a response to the harsh competition by AMD? Do you see similar trends in your country?&lt;/p&gt; &lt;p&gt;2291.- offer was found on nalda.ch&lt;/p&gt; &lt;p&gt;1950.- offer (they used the 5080 package in the image, but the stats mention the 5090) was found on conrad.ch&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Mr_Moonsilver"&gt; /u/Mr_Moonsilver &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k8d8a3/5090_prices_in_switzerland_normalizing_looking/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k8d8a3/5090_prices_in_switzerland_normalizing_looking/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k8d8a3/5090_prices_in_switzerland_normalizing_looking/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T13:41:47+00:00</published>
  </entry>
  <entry>
    <id>t3_1k83moy</id>
    <title>Does Reinforcement Learning Really Incentivize Reasoning Capacity in LLMs Beyond the Base Model?</title>
    <updated>2025-04-26T03:31:47+00:00</updated>
    <author>
      <name>/u/ninjasaid13</name>
      <uri>https://old.reddit.com/user/ninjasaid13</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Source: &lt;a href="https://arxiv.org/abs/2504.13837"&gt;https://arxiv.org/abs/2504.13837&lt;/a&gt;&lt;/p&gt; &lt;p&gt;video&lt;/p&gt; &lt;p&gt;Recent breakthroughs in reasoning-focused large language models (LLMs) like OpenAI-o1, DeepSeek-R1, and Kimi-1.5 have largely relied on &lt;em&gt;Reinforcement Learning with Verifiable Rewards&lt;/em&gt; (RLVR), which replaces human annotations with automated rewards (e.g., verified math solutions or passing code tests) to scale self-improvement. While RLVR enhances reasoning behaviors such as self-reflection and iterative refinement, we challenge a core assumption:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;Does RLVR actually expand LLMs' reasoning capabilities, or does it merely optimize existing ones?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;By evaluating models via &lt;em&gt;pass@k&lt;/em&gt;, where success requires just one correct solution among &lt;em&gt;k&lt;/em&gt; attempts, we uncover that RL-trained models excel at low &lt;em&gt;k&lt;/em&gt; (e.g., pass@1) but are consistently &lt;em&gt;outperformed by base models&lt;/em&gt; at high &lt;em&gt;k&lt;/em&gt; (e.g., pass@256). This demonstrates that RLVR &lt;em&gt;narrows the model's exploration&lt;/em&gt;, favoring known high-reward paths instead of discovering new reasoning strategies. Crucially, all correct solutions from RL-trained models already exist in the base model's distribution, proving RLVR enhances &lt;em&gt;sampling efficiency&lt;/em&gt;, not reasoning capacity, while inadvertently shrinking the solution space.&lt;/p&gt; &lt;p&gt;&lt;a href="https://reddit.com/link/1k83moy/video/sb8m5ckim3xe1/player"&gt;The effect of RLVR on LLM's reasoning ability. Search trees are generated by repeated sampling from the base and RLVR-trained models for a given problem. Grey indicates paths that are unlikely to be sampled by the model, while black indicates paths that are likely to be sampled. Green indicates correct paths, which has positive rewards. Our key finding is that all reasoning paths in the RLVR model are already present in the base model. For certain problems like Problem A, RLVR training biases the distribution toward rewarded paths, improving sampling efficiency. However, this comes at the cost of reduced scope of reasoning capacity: For other problems like Problem B, the base model contains the correct path, whereas that of the RLVR model does not.&lt;/a&gt;&lt;/p&gt; &lt;h1&gt;Conclusion&lt;/h1&gt; &lt;ol&gt; &lt;li&gt;**RL-trained models perform worse than base models in pass@**&lt;strong&gt;&lt;em&gt;k&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;at large k values.&lt;/strong&gt; While RL-trained models outperform base models at low sampling sizes (small &lt;em&gt;k&lt;/em&gt;), base models consistently surpass them at larger &lt;em&gt;k&lt;/em&gt; across all benchmarks, even achieving higher pass@&lt;em&gt;k&lt;/em&gt; scores. Manual inspection reveals that base models can solve problems thought to require RL training by generating diverse reasoning paths, with at least one correct solution per problem. This indicates that RL training does not enhance—and may even limit—the full reasoning potential of LLMs compared to aggressive sampling in the base model.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;RL boosts sampling efficiency but reduces the reasoning capacity boundary.&lt;/strong&gt; The analysis reveals that RLVR-trained models generate reasoning paths already within the base model's output distribution, meaning RLVR biases the model toward higher-rewarded solutions rather than creating entirely new reasoning abilities. However, this focus on rewarded paths reduces the model's exploration capacity, limiting its coverage of solvable problems at larger sampling sizes. These findings suggest that RLVR does not fundamentally transcend the base model's reasoning capabilities but instead optimizes existing pathways at the cost of broader problem-solving diversity.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;RLVR algorithms perform similarly and remain far from optimal.&lt;/strong&gt; The study compares various RL algorithms (PPO, GRPO, Reinforce++) and finds their performance differences minor, as measured by the sampling efficiency gap (∆SE), which assesses how close they get to optimal sampling efficiency. Despite slight variations in ∆SE among algorithms, the gap remains large across all methods. This indicates that current RL approaches, focused on improving sampling efficiency, still fall far short of optimal performance.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;RLVR and distillation are fundamentally different.&lt;/strong&gt; While RL improves sampling efficiency, distillation can genuinely introduce new knowledge into the model. As a result, distilled models often exhibit an expanded scope of reasoning capability beyond that of the base model by learning from distilled models, in contrast to RLVR-trained models whose capacity remains bounded by the base.&lt;/li&gt; &lt;/ol&gt; &lt;h1&gt;Conclusion&lt;/h1&gt; &lt;ol&gt; &lt;li&gt;**RL-trained models perform worse than base models in pass@**&lt;strong&gt;&lt;em&gt;k&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;at large k values.&lt;/strong&gt; While RL-trained models outperform base models at low sampling sizes (small &lt;em&gt;k&lt;/em&gt;), base models consistently surpass them at larger &lt;em&gt;k&lt;/em&gt; across all benchmarks, even achieving higher pass@&lt;em&gt;k&lt;/em&gt; scores. Manual inspection reveals that base models can solve problems thought to require RL training by generating diverse reasoning paths, with at least one correct solution per problem. This indicates that RL training does not enhance—and may even limit—the full reasoning potential of LLMs compared to aggressive sampling in the base model.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;RL boosts sampling efficiency but reduces the reasoning capacity boundary.&lt;/strong&gt; The analysis reveals that RLVR-trained models generate reasoning paths already within the base model's output distribution, meaning RLVR biases the model toward higher-rewarded solutions rather than creating entirely new reasoning abilities. However, this focus on rewarded paths reduces the model's exploration capacity, limiting its coverage of solvable problems at larger sampling sizes. These findings suggest that RLVR does not fundamentally transcend the base model's reasoning capabilities but instead optimizes existing pathways at the cost of broader problem-solving diversity.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;RLVR algorithms perform similarly and remain far from optimal.&lt;/strong&gt; The study compares various RL algorithms (PPO, GRPO, Reinforce++) and finds their performance differences minor, as measured by the sampling efficiency gap (∆SE), which assesses how close they get to optimal sampling efficiency. Despite slight variations in ∆SE among algorithms, the gap remains large across all methods. This indicates that current RL approaches, focused on improving sampling efficiency, still fall far short of optimal performance.&lt;/li&gt; &lt;li&gt;&lt;p&gt;&lt;strong&gt;RLVR and distillation are fundamentally different.&lt;/strong&gt; While RL improves sampling efficiency, distillation can genuinely introduce new knowledge into the model. As a result, distilled models often exhibit an expanded scope of reasoning capability beyond that of the base model by learning from distilled models, in contrast to RLVR-trained models whose capacity remains bounded by the base.&lt;/p&gt; &lt;p&gt;&lt;a href="/u/article"&gt;u/article&lt;/a&gt;{yue2025limit-of-rlvr, title={Does Reinforcement Learning Really Incentivize Reasoning Capacity in LLMs Beyond the Base Model?}, author={Yue, Yang and Chen, Zhiqi and Lu, Rui and Zhao, Andrew and Wang, Zhaokai and Yue, Yang and Song, Shiji and Huang, Gao}, journal={arXiv preprint arXiv:2504.13837}, year={2025} }&lt;/p&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/ninjasaid13"&gt; /u/ninjasaid13 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k83moy/does_reinforcement_learning_really_incentivize/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k83moy/does_reinforcement_learning_really_incentivize/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k83moy/does_reinforcement_learning_really_incentivize/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T03:31:47+00:00</published>
  </entry>
  <entry>
    <id>t3_1k7t6dm</id>
    <title>Deepseek r2 when?</title>
    <updated>2025-04-25T19:10:33+00:00</updated>
    <author>
      <name>/u/power97992</name>
      <uri>https://old.reddit.com/user/power97992</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I hope it comes out this month, i saw a post that said it was gonna come out before May..&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/power97992"&gt; /u/power97992 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7t6dm/deepseek_r2_when/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7t6dm/deepseek_r2_when/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k7t6dm/deepseek_r2_when/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-25T19:10:33+00:00</published>
  </entry>
  <entry>
    <id>t3_1k7stfg</id>
    <title>I built a debugging MCP server that saves me ~2 programming hours a day</title>
    <updated>2025-04-25T18:55:29+00:00</updated>
    <author>
      <name>/u/klawisnotwashed</name>
      <uri>https://old.reddit.com/user/klawisnotwashed</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7stfg/i_built_a_debugging_mcp_server_that_saves_me_2/"&gt; &lt;img alt="I built a debugging MCP server that saves me ~2 programming hours a day" src="https://external-preview.redd.it/O7iRdpSAOTXAp8ugLZRXApZZDYusuN_fEGs3eP-yzAo.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=b7b677b4629df76504b2adac01e7283245681d54" title="I built a debugging MCP server that saves me ~2 programming hours a day" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi!&lt;/p&gt; &lt;p&gt;Deebo is an agentic debugging system wrapped in an MCP server, so it acts as a copilot for your coding agent.&lt;/p&gt; &lt;p&gt;Think of your main coding agent as a single threaded process. Deebo introduces multi threadedness to AI-assisted coding. You can have your agent delegate tricky bugs, context heavy tasks, validate theories, run simulations, etc.&lt;/p&gt; &lt;p&gt;The cool thing is the agents inside the deebo mcp server USE mcp themselves! They use git and file system MCP tools in order to actually read and edit code. They also do their work in separate git branches which provides natural process isolation. &lt;/p&gt; &lt;p&gt;Deebo scales to production codebases, too. I took on a tinygrad bug bounty with me + Cline + Deebo with no previous experience with the tinygrad codebase. Deebo spawned 17 scenario agents over multiple OODA loops, and synthesized 2 valid fixes! You can read the &lt;a href="https://github.com/snagasuri/deebo-prototype/tree/master/memory-bank/9bd38e9840d3/sessions/session-1744006973678"&gt;session logs here&lt;/a&gt; and see &lt;a href="https://github.com/snagasuri/deebo-prototype/blob/master/memory-bank/9bd38e9840d3/progress.md"&gt;the final fix here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you’ve ever gotten frustrated with your coding agent for looping endlessly on a seemingly simple task, you can install Deebo with a one line npx &lt;a href="mailto:deebo-setup@latest"&gt;deebo-setup@latest&lt;/a&gt;. The code is fully open source! Take a look at the code! &lt;a href="https://github.com/snagasuri/deebo-prototype"&gt;https://github.com/snagasuri/deebo-prototype&lt;/a&gt;&lt;/p&gt; &lt;p&gt;I came up with all the system design, implementation, etc. myself so if anyone wants to chat about how Deebo works/has any questions I'd love to talk! Would highly appreciate your guys feedback! Thanks!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/klawisnotwashed"&gt; /u/klawisnotwashed &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://github.com/snagasuri/deebo-prototype"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7stfg/i_built_a_debugging_mcp_server_that_saves_me_2/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k7stfg/i_built_a_debugging_mcp_server_that_saves_me_2/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-25T18:55:29+00:00</published>
  </entry>
  <entry>
    <id>t3_1k8csdj</id>
    <title>A simple CLI tool for managing and running llama-server</title>
    <updated>2025-04-26T13:19:51+00:00</updated>
    <author>
      <name>/u/robiinn</name>
      <uri>https://old.reddit.com/user/robiinn</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi, I mostly made this tool to manage and run my local models and their parameters, mostly for my own use but I share it in case it is useful for someone else. I wish I had a tool like this when I started with local models, so I hope it is helpful!&lt;/p&gt; &lt;p&gt;The purpose of the tool it be very simple to use. 1. Install the pip packages 2. Simply place the llama-server-cli.py file next to your llama-server executable. 3. Run it. 4. Use the interface to point it at the gguf file and start the server, this will use the default parameters. &lt;/p&gt; &lt;p&gt;It will run the server in the background and any changes made to the settings while the server is running will restart the server automatically with the new settings.&lt;/p&gt; &lt;p&gt;You can find it here: &lt;a href="https://github.com/R-Dson/llama-server-cli.py"&gt;https://github.com/R-Dson/llama-server-cli.py&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/robiinn"&gt; /u/robiinn &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k8csdj/a_simple_cli_tool_for_managing_and_running/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k8csdj/a_simple_cli_tool_for_managing_and_running/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k8csdj/a_simple_cli_tool_for_managing_and_running/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T13:19:51+00:00</published>
  </entry>
  <entry>
    <id>t3_1k7tg8n</id>
    <title>GLM-4-9B(Q5_K_L) Heptagon Balls sim (multi-prompt)</title>
    <updated>2025-04-25T19:22:16+00:00</updated>
    <author>
      <name>/u/danihend</name>
      <uri>https://old.reddit.com/user/danihend</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7tg8n/glm49bq5_k_l_heptagon_balls_sim_multiprompt/"&gt; &lt;img alt="GLM-4-9B(Q5_K_L) Heptagon Balls sim (multi-prompt)" src="https://external-preview.redd.it/M3Z4eDhhdmU3MXhlMYg3hh2y6NN7WC_nAJWjhF3jltCetUE7ORI41iUNIAJC.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=45713b47f9ba53d37e0b87a41e271222a2364c40" title="GLM-4-9B(Q5_K_L) Heptagon Balls sim (multi-prompt)" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Title pretty much says it but just to clarify - it wasn't one-shot. It was prompt-&amp;gt;response-&amp;gt;error, then this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Here is an error after running the sim: &amp;lt;error&amp;gt; Exception in Tkinter callback Traceback (most recent call last): File &amp;quot;C:\Users\username\anaconda3\Lib\tkinter_init_.py&amp;quot;, line 1967, in call return self.func(*args) ^^^^^^^^^^^^^^^^ File &amp;quot;C:\Users\username\anaconda3\Lib\tkinter_init_.py&amp;quot;, line 861, in callit func(*args) File &amp;quot;c:\Users\username\VSCodeProjects\model_tests\balls\GLM49B_Q5KL_balls.py&amp;quot;, line 140, in update current_time_ms = float(current_time) ^^^^^^^^^^^^^^^^^^^ ValueError: could not convert string to float: 'after#2' &amp;lt;/error&amp;gt; Now think as hard as you can about why this is happening. Look at the entire script and consider how the parts work together. You are free to think as long as you need if you use thinking tags like this: &amp;lt;think&amp;gt;thoughts here&amp;lt;/think&amp;gt;. Once finished thinking, just provide the patch to the code. No need to rewrite it all. &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then I applied the fix, got another error, replaced the original Assistant code block with the new code and presented the new error as if it were the 1st error by editing my message. I think that resulted in the working version.&lt;/p&gt; &lt;p&gt;So TL;DR - couple of prompts to get it working.&lt;/p&gt; &lt;p&gt;Simply pasting error after error did not work, but structured prompting with a bit of thinking seems to bring out some more potential.&lt;/p&gt; &lt;p&gt;Just thought I'd share in case it helps people with prompting it and just to show that it is not a bad model for it's size. The result is very similar to the 32B version.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/danihend"&gt; /u/danihend &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://v.redd.it/zrjvo8ve71xe1"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7tg8n/glm49bq5_k_l_heptagon_balls_sim_multiprompt/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k7tg8n/glm49bq5_k_l_heptagon_balls_sim_multiprompt/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-25T19:22:16+00:00</published>
  </entry>
  <entry>
    <id>t3_1k7quqt</id>
    <title>Do people trying to squeeze every last GB out of their GPU use their IGPU to display to their monitor?</title>
    <updated>2025-04-25T17:34:59+00:00</updated>
    <author>
      <name>/u/Golfclubwar</name>
      <uri>https://old.reddit.com/user/Golfclubwar</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;By default, just for basic display, Linux can eat 500MB, windows can eat 1.1GB. I imagine for someone with like an 8-12GB card trying to barely squeeze the biggest model they can onto the gpu by tweaking context size and quant etc., this is a highly nontrivial cost. &lt;/p&gt; &lt;p&gt;Unless for some reason you needed the dgpu for something else, why wouldn’t they just display using their IGPU instead? Obviously there’s still a fixed driver overhead, but you’d save nearly a gigabyte, and in terms of simply using an IDE and a browser it’s hard to think of any drawbacks.&lt;/p&gt; &lt;p&gt;Am I stupid and this wouldn’t work the way I think it would or something?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Golfclubwar"&gt; /u/Golfclubwar &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7quqt/do_people_trying_to_squeeze_every_last_gb_out_of/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7quqt/do_people_trying_to_squeeze_every_last_gb_out_of/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k7quqt/do_people_trying_to_squeeze_every_last_gb_out_of/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-25T17:34:59+00:00</published>
  </entry>
  <entry>
    <id>t3_1k89gaa</id>
    <title>Handling Mid-Sentence Pauses in Voice Conversations?</title>
    <updated>2025-04-26T09:58:37+00:00</updated>
    <author>
      <name>/u/_lindt_</name>
      <uri>https://old.reddit.com/user/_lindt_</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I don’t think this is an LLM/ML problem — it feels more like an algorithmic issue. Current systems don’t handle natural pauses well. If you pause mid-sentence to think, the model often responds prematurely based only on what’s been said so far, which disrupts the conversation’s flow. Has anyone found or implemented a solution for this?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/_lindt_"&gt; /u/_lindt_ &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k89gaa/handling_midsentence_pauses_in_voice_conversations/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k89gaa/handling_midsentence_pauses_in_voice_conversations/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k89gaa/handling_midsentence_pauses_in_voice_conversations/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T09:58:37+00:00</published>
  </entry>
  <entry>
    <id>t3_1k7krlm</id>
    <title>Gemma 3 fakes (and ignores) the system prompt</title>
    <updated>2025-04-25T13:20:27+00:00</updated>
    <author>
      <name>/u/WolframRavenwolf</name>
      <uri>https://old.reddit.com/user/WolframRavenwolf</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7krlm/gemma_3_fakes_and_ignores_the_system_prompt/"&gt; &lt;img alt="Gemma 3 fakes (and ignores) the system prompt" src="https://preview.redd.it/xuycbwnk4zwe1.jpeg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=8fba119d92fca9059223ac136a22602c0f3b43b8" title="Gemma 3 fakes (and ignores) the system prompt" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;The screenshot shows what Gemma 3 said when I pointed out that it wasn't following its system prompt properly. &amp;quot;Who reads the fine print? 😉&amp;quot; - really, seriously, WTF?&lt;/p&gt; &lt;p&gt;At first I thought it may be an issue with the format/quant, an inference engine bug or just my settings or prompt. But digging deeper, I realized I had been fooled: While the [Gemma 3 chat template](&lt;a href="https://huggingface.co/google/gemma-3-27b-it/blob/main/chat%5C_template.json"&gt;https://huggingface.co/google/gemma-3-27b-it/blob/main/chat\_template.json&lt;/a&gt;) *does* support a system role, all it *really* does is dump the system prompt into the first user message. That's both ugly *and* unreliable - doesn't even use any special tokens, so there's no way for the model to differentiate between what the system (platform/dev) specified as general instructions and what the (possibly untrusted) user said. 🙈&lt;/p&gt; &lt;p&gt;Sure, the model still follows instructions like any other user input - but it never learned to treat them as higher-level system rules, so they're basically &amp;quot;optional&amp;quot;, which is why it ignored mine like &amp;quot;fine print&amp;quot;. That makes Gemma 3 utterly unreliable - so I'm switching to Mistral Small 3.1 24B Instruct 2503 which has proper system prompt support.&lt;/p&gt; &lt;p&gt;Hopefully Google will provide *real* system prompt support in Gemma 4 - or the community will deliver a better finetune in the meantime. For now, I'm hoping Mistral's vision capability gets wider support, since that's one feature I'll miss from Gemma.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/WolframRavenwolf"&gt; /u/WolframRavenwolf &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/xuycbwnk4zwe1.jpeg"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7krlm/gemma_3_fakes_and_ignores_the_system_prompt/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k7krlm/gemma_3_fakes_and_ignores_the_system_prompt/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-25T13:20:27+00:00</published>
  </entry>
  <entry>
    <id>t3_1k7uxxk</id>
    <title>LM Studio 0.3.15 with support for GLM-4 models and NVIDIA RTX50-series just got released</title>
    <updated>2025-04-25T20:25:39+00:00</updated>
    <author>
      <name>/u/ispolin</name>
      <uri>https://old.reddit.com/user/ispolin</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7uxxk/lm_studio_0315_with_support_for_glm4_models_and/"&gt; &lt;img alt="LM Studio 0.3.15 with support for GLM-4 models and NVIDIA RTX50-series just got released" src="https://b.thumbs.redditmedia.com/zPNTVgAISYkoCxdv3xYABX-74BRXUsT6QERGjZPbVto.jpg" title="LM Studio 0.3.15 with support for GLM-4 models and NVIDIA RTX50-series just got released" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;&lt;a href="https://preview.redd.it/mxja601ei1xe1.png?width=2102&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=31ca8d6f8f7b767e7379e5b00878cc43622b19c1"&gt;https://preview.redd.it/mxja601ei1xe1.png?width=2102&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=31ca8d6f8f7b767e7379e5b00878cc43622b19c1&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/ispolin"&gt; /u/ispolin &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7uxxk/lm_studio_0315_with_support_for_glm4_models_and/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7uxxk/lm_studio_0315_with_support_for_glm4_models_and/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k7uxxk/lm_studio_0315_with_support_for_glm4_models_and/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-25T20:25:39+00:00</published>
  </entry>
  <entry>
    <id>t3_1k8dqa7</id>
    <title>It's really cool now to have an idea, and few hours later you have a working app</title>
    <updated>2025-04-26T14:05:42+00:00</updated>
    <author>
      <name>/u/Nyao</name>
      <uri>https://old.reddit.com/user/Nyao</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k8dqa7/its_really_cool_now_to_have_an_idea_and_few_hours/"&gt; &lt;img alt="It's really cool now to have an idea, and few hours later you have a working app" src="https://external-preview.redd.it/MzQ1cGE3N2FxNnhlMe_3z2US61k9w-e99dI3sh4KfvfwKeGQ6lAD-f6G97nN.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=2d39f3e4229afc94ed424a14e9084252b056a258" title="It's really cool now to have an idea, and few hours later you have a working app" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I rarely do web development, and without the help of LLMs it would have taken me days to build the frontend and these animations. But after one morning, I already have a cool result.&lt;/p&gt; &lt;p&gt;The idea and the app themselves aren't very original or complex, but here's the source code in case anyone is interested: &lt;a href="https://github.com/YofarDev/chapitre"&gt;https://github.com/YofarDev/chapitre&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Nyao"&gt; /u/Nyao &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://v.redd.it/vgz7967aq6xe1"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k8dqa7/its_really_cool_now_to_have_an_idea_and_few_hours/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k8dqa7/its_really_cool_now_to_have_an_idea_and_few_hours/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T14:05:42+00:00</published>
  </entry>
  <entry>
    <id>t3_1k88k0h</id>
    <title>System Prompt vs. User Prompt</title>
    <updated>2025-04-26T08:53:10+00:00</updated>
    <author>
      <name>/u/ihatebeinganonymous</name>
      <uri>https://old.reddit.com/user/ihatebeinganonymous</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi. What difference does it make, if I split my instructions into a system and user prompt, compared to just writing everything in the user prompt and keeping the system prompt empty or the generic &amp;quot;You are a helpful assistant&amp;quot;? &lt;/p&gt; &lt;p&gt;Assume the instruction is composed of an almost constant part (e.g. here is the data), and a more variable part (the question about the data). Is there any tangible difference in correctness, consistency etc?&lt;/p&gt; &lt;p&gt;And given that OpenAI API allows multiple user messages in the same request (does it?), will it have any benefit to separate a message into multiple user messages?&lt;/p&gt; &lt;p&gt;It's not an interactive scenario, so jailbreaking is not an issue. And for paid models, the tokens are anyways counted for the whole payload at the same rate, right?&lt;/p&gt; &lt;p&gt;Thanks&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/ihatebeinganonymous"&gt; /u/ihatebeinganonymous &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k88k0h/system_prompt_vs_user_prompt/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k88k0h/system_prompt_vs_user_prompt/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k88k0h/system_prompt_vs_user_prompt/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T08:53:10+00:00</published>
  </entry>
  <entry>
    <id>t3_1k7rgyv</id>
    <title>Tiny Agents: a MCP-powered agent in 50 lines of code</title>
    <updated>2025-04-25T18:00:23+00:00</updated>
    <author>
      <name>/u/julien_c</name>
      <uri>https://old.reddit.com/user/julien_c</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7rgyv/tiny_agents_a_mcppowered_agent_in_50_lines_of_code/"&gt; &lt;img alt="Tiny Agents: a MCP-powered agent in 50 lines of code" src="https://external-preview.redd.it/fCTs8gI7KvvOKk5o8AQ0g6EQWi7h5KkDI0MBs8uNyiw.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=09d0dce63a6cd60077b6242bb1e5e6a8b6411b5f" title="Tiny Agents: a MCP-powered agent in 50 lines of code" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi!&lt;/p&gt; &lt;p&gt;I'm a co-founder of HuggingFace and a big &lt;a href="/r/LocalLLaMA"&gt;r/LocalLLaMA&lt;/a&gt; fan.&lt;/p&gt; &lt;p&gt;Today I'm dropping Tiny Agents, a 50 lines-of-code Agent in Javascript 🔥&lt;/p&gt; &lt;p&gt;I spent the last few weeks diving into MCP (Model Context Protocol) to understand what the hype was about.&lt;/p&gt; &lt;p&gt;It is fairly simple, but still quite useful as a standard API to expose sets of Tools that can be hooked to LLMs.&lt;/p&gt; &lt;p&gt;But while implementing it I came to my second realization:&lt;/p&gt; &lt;p&gt;Once you have a MCP Client, an Agent is literally just a while loop on top of it. 🤯&lt;/p&gt; &lt;p&gt;&lt;a href="https://huggingface.co/blog/tiny-agents"&gt;https://huggingface.co/blog/tiny-agents&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://preview.redd.it/v0acl2n6t0xe1.png?width=1846&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=8cecc5f62c6e05855d5ea1b67cceb56e2ccddbf5"&gt;https://preview.redd.it/v0acl2n6t0xe1.png?width=1846&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=8cecc5f62c6e05855d5ea1b67cceb56e2ccddbf5&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/julien_c"&gt; /u/julien_c &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7rgyv/tiny_agents_a_mcppowered_agent_in_50_lines_of_code/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7rgyv/tiny_agents_a_mcppowered_agent_in_50_lines_of_code/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k7rgyv/tiny_agents_a_mcppowered_agent_in_50_lines_of_code/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-25T18:00:23+00:00</published>
  </entry>
  <entry>
    <id>t3_1k85izg</id>
    <title>5tps with Llama 4 Scout via Ollama and Unsloth dynamic quants, CPU only</title>
    <updated>2025-04-26T05:26:45+00:00</updated>
    <author>
      <name>/u/RobotRobotWhatDoUSee</name>
      <uri>https://old.reddit.com/user/RobotRobotWhatDoUSee</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I noticed that the llama 4 branch was just merged into ollama main, so I updated ollama and grabbed the 2.71 bit unsloth dynamic quant:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;ollama run --verbose hf.co/unsloth/Llama-4-Scout-17B-16E-Instruct-GGUF:Q2_K_XL&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;It works!&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;total duration: 2m7.090132071s&lt;/p&gt; &lt;p&gt;load duration: 45.646389ms&lt;/p&gt; &lt;p&gt;prompt eval count: 91 token(s)&lt;/p&gt; &lt;p&gt;prompt eval duration: 4.847635243s&lt;/p&gt; &lt;p&gt;prompt eval rate: 18.77 tokens/s&lt;/p&gt; &lt;p&gt;eval count: 584 token(s)&lt;/p&gt; &lt;p&gt;eval duration: 2m2.195920773s&lt;/p&gt; &lt;p&gt;eval rate: 4.78 tokens/s&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;42GB is the size of the 2.71Q model on disk, and it is much faster (of course) than equivalent 70B Q4 (which is also 42GB on disc)&lt;/p&gt; &lt;p&gt;CPU is 64GB Ryzen 7.&lt;/p&gt; &lt;p&gt;Feels lightning fast for CPU only compared to 70B and even 27-32B dense models. &lt;/p&gt; &lt;p&gt;First test questions worked great. &lt;/p&gt; &lt;p&gt;Looking forward to using this; I've been hoping for a large MoE with small experts for a while, very excited.&lt;/p&gt; &lt;p&gt;Next will be Maverick on the AI server (500GB RAM, 24GB VRAM)...&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/RobotRobotWhatDoUSee"&gt; /u/RobotRobotWhatDoUSee &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k85izg/5tps_with_llama_4_scout_via_ollama_and_unsloth/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k85izg/5tps_with_llama_4_scout_via_ollama_and_unsloth/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k85izg/5tps_with_llama_4_scout_via_ollama_and_unsloth/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T05:26:45+00:00</published>
  </entry>
  <entry>
    <id>t3_1k7uvpm</id>
    <title>Qwen introduces their mobile app</title>
    <updated>2025-04-25T20:22:54+00:00</updated>
    <author>
      <name>/u/Vegetable-Practice85</name>
      <uri>https://old.reddit.com/user/Vegetable-Practice85</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7uvpm/qwen_introduces_their_mobile_app/"&gt; &lt;img alt="Qwen introduces their mobile app" src="https://preview.redd.it/ewjq8s2ei1xe1.jpeg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=1fe3b4f5cf5c69932dece355c02addb1e439cdd0" title="Qwen introduces their mobile app" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Vegetable-Practice85"&gt; /u/Vegetable-Practice85 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/ewjq8s2ei1xe1.jpeg"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7uvpm/qwen_introduces_their_mobile_app/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k7uvpm/qwen_introduces_their_mobile_app/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-25T20:22:54+00:00</published>
  </entry>
  <entry>
    <id>t3_1k89s1u</id>
    <title>Lmarena hard auto benchmark v2 results.</title>
    <updated>2025-04-26T10:21:38+00:00</updated>
    <author>
      <name>/u/pier4r</name>
      <uri>https://old.reddit.com/user/pier4r</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;&lt;a href="https://github.com/lmarena/arena-hard-auto"&gt;https://github.com/lmarena/arena-hard-auto&lt;/a&gt;&lt;/p&gt; &lt;p&gt;(Hard Prompt, Style Control, and Gemini-2.5 as Judge)&lt;/p&gt; &lt;pre&gt;&lt;code&gt; Model Scores (%) CI (%) 0 o3-2025-04-16 86.1 (-1.1 / +1.1) 1 gemini-2.5 79.3 (-1.5 / +1.9) 2 o4-mini-2025-04-16-high 79.2 (-1.2 / +1.5) 3 o4-mini-2025-04-16 74.8 (-1.4 / +1.4) 4 gemini-2.5-flash 69.0 (-1.3 / +1.9) 5 o3-mini-2025-01-31-high 66.5 (-1.9 / +1.4) 6 claude-3-7-sonnet-20250219-thinking-16k 61.1 (-2.1 / +1.5) 7 o1-2024-12-17-high 61.0 (-1.6 / +1.8) 8 deepseek-r1 57.9 (-2.4 / +2.3) 9 o1-2024-12-17 56.0 (-1.7 / +2.0) 10 gpt-4.5-preview 50.7 (-1.8 / +1.7) 11 gpt-4.1 50.7 (-2.3 / +1.9) 12 o3-mini-2025-01-31 50.0 (-0.0 / +0.0) 13 gpt-4.1-mini 47.2 (-1.9 / +2.6) 14 QwQ-32B 43.7 (-2.4 / +2.1) 15 claude-3-5-sonnet-20241022 33.6 (-1.9 / +1.7) 16 s1.1-32B 22.2 (-1.6 / +1.6) 17 llama4-maverick-instruct-basic 17.5 (-1.4 / +1.6) 18 Athene-V2-Chat 16.5 (-1.0 / +1.5) 19 gemma-3-27b-it 14.8 (-1.3 / +0.9) 20 gpt-4.1-nano 14.1 (-1.3 / +1.0) 21 Llama-3.1-Nemotron-70B-Instruct-HF 10.1 (-0.9 / +0.8) 22 Qwen2.5-72B-Instruct 10.1 (-0.8 / +1.3) 23 OpenThinker2-32B 3.1 (-0.2 / +0.4) &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Interesting tidbits that apply also on the lmarena benchmark. Emphasis is mine. For example on the part that simple prompts - that could be common in LMarena (check the lmarena explorer) - make two models similar though the models could be vastly different.&lt;/p&gt; &lt;p&gt;Of course LLM judges may be biased as well (there are some papers on this), but I think they are trying to limit the bias as much as they can.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;V2.0 contains 500 fresh, challenging real-world user queries (open-ended software engineering problems, math questions, etc) and 250 creative writing queries sourced from Chatbot Arena. We employs automatic judges, GPT-4.1 and Gemini-2.5, as a cheaper and faster approximator to human preference.&lt;/p&gt; &lt;p&gt;Following the newly introduced Style Control on Chatbot Arena, we release Style Control on Arena Hard Auto! We employ the same Style Control methods as proposed in the blogpost. Please refer to the blogpost for methodology and technical background. (&lt;a href="https://lmsys.org/blog/2024-08-28-style-control/"&gt;https://lmsys.org/blog/2024-08-28-style-control/&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;We outline two key properties that the benchmark aiming to approximate human preference should possess to provide meaningful comparisons between models:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Separability: the benchmark should separate models with high confidence.&lt;/li&gt; &lt;li&gt;Alignment with Human Preference: the benchmark should agree with human preference.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;While previous works have focused on alignment, separability is also a crucial consideration when comparing models of similar quality (e.g., different checkpoints from the same training run). However, achieving high-confidence separability is challenging due to limitations in prompt design and inherent variances in LLM evaluations. &lt;strong&gt;Overly simplistic prompts fail to distinguish between models&lt;/strong&gt;, while the randomness in human and LLM judgments leads to inconsistent predictions. As a result, it is often difficult to confidently determine if a model’s apparent performance reflects a genuine difference in capability or merely noisy observations, highlighting a need for methods to verify whether a benchmark can reliably separate similar models.&lt;/p&gt; &lt;p&gt;Statistical measures like Pearson (Pearson, 1895) and Spearman Correlations (Spearman, 1961), commonly used in benchmarks such as AlpacaEval (Li et al., 2023) to measure correlation to human preference ranking, may fail to adequately address model separability and ranking instability. In addition, these measures only provide a coarse signal of ranking correlation without quantifying the magnitude of performance differences between model pairs. To address these shortcomings, we develop three novel metrics: Separability with Confidence, Agreement with Confidence, and Pair Rank Brier Score.&lt;/p&gt; &lt;/blockquote&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/pier4r"&gt; /u/pier4r &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k89s1u/lmarena_hard_auto_benchmark_v2_results/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k89s1u/lmarena_hard_auto_benchmark_v2_results/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k89s1u/lmarena_hard_auto_benchmark_v2_results/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T10:21:38+00:00</published>
  </entry>
  <entry>
    <id>t3_1k801ba</id>
    <title>It's been a while since we had new Qwen &amp; Qwen Coder models...</title>
    <updated>2025-04-26T00:18:43+00:00</updated>
    <author>
      <name>/u/sammcj</name>
      <uri>https://old.reddit.com/user/sammcj</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Just saying... 😉&lt;/p&gt; &lt;p&gt;In all seriousness if they need to cook further - let them cook.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/sammcj"&gt; /u/sammcj &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k801ba/its_been_a_while_since_we_had_new_qwen_qwen_coder/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k801ba/its_been_a_while_since_we_had_new_qwen_qwen_coder/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k801ba/its_been_a_while_since_we_had_new_qwen_qwen_coder/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T00:18:43+00:00</published>
  </entry>
  <entry>
    <id>t3_1k7o89n</id>
    <title>We compress any BF16 model to ~70% size during inference, while keeping the output LOSSLESS so that you can fit in more ERP context or run larger models.</title>
    <updated>2025-04-25T15:47:29+00:00</updated>
    <author>
      <name>/u/choHZ</name>
      <uri>https://old.reddit.com/user/choHZ</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Glad to share another interesting piece of work from us: &lt;a href="https://arxiv.org/abs/2504.11651"&gt;&lt;strong&gt;70% Size, 100% Accuracy: Lossless LLM Compression for Efficient GPU Inference via Dynamic-Length Float (DF11)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The tl;dr of this work is super simple. We — and several prior works — noticed that while &lt;strong&gt;BF16&lt;/strong&gt; is often promoted as a “more range, less precision” alternative to FP16 (especially to avoid value overflow/underflow during training), &lt;strong&gt;its range part (exponent bits) ends up being pretty redundant once the model is trained.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In other words, although BF16 as a data format can represent a wide range of numbers, most trained models' exponents are plenty sparse. In practice, the exponent bits carry around 2.6 bits of actual information on average — far from the full 8 bits they're assigned.&lt;/p&gt; &lt;p&gt;This opens the door for classic Huffman coding — where shorter bit sequences are assigned to more frequent values — to &lt;strong&gt;compress the model weights&lt;/strong&gt; into a new data format we call &lt;strong&gt;DFloat11/DF11&lt;/strong&gt;, resulting in a &lt;strong&gt;LOSSLESS compression down to ~11 bits&lt;/strong&gt;.&lt;/p&gt; &lt;h1&gt;But isn’t this just Zip?&lt;/h1&gt; &lt;p&gt;Not exactly. It is true that tools like Zip also leverage Huffman coding, but the tricky part here is &lt;strong&gt;making it memory efficient during inference&lt;/strong&gt;, as end users are probably not gonna be too trilled if it just makes model checkpoint downloads a bit faster (in all fairness, smaller chekpoints means a lot when training at scale, but that's not a problem for everyday users).&lt;/p&gt; &lt;p&gt;What does matter to everyday users is &lt;strong&gt;making the memory footprint smaller during GPU inference, which requires nontrivial efforts.&lt;/strong&gt; But we have figured it out, and we’ve open-sourced the code.&lt;/p&gt; &lt;p&gt;So now you can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Run models that previously didn’t fit into your GPU memory.&lt;/li&gt; &lt;li&gt;Or run the same model with &lt;strong&gt;larger batch sizes and/or longer sequences&lt;/strong&gt; (very handy for those lengthy ERPs, or so I have heard).&lt;/li&gt; &lt;/ul&gt; &lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th align="left"&gt;Model&lt;/th&gt; &lt;th align="left"&gt;GPU Type&lt;/th&gt; &lt;th align="left"&gt;Method&lt;/th&gt; &lt;th align="left"&gt;Successfully Run?&lt;/th&gt; &lt;th align="left"&gt;Required Memory&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;td align="left"&gt;Llama-3.1-405B-Instruct&lt;/td&gt; &lt;td align="left"&gt;8×H100-80G&lt;/td&gt; &lt;td align="left"&gt;BF16&lt;/td&gt; &lt;td align="left"&gt;❌&lt;/td&gt; &lt;td align="left"&gt;811.71 GB&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;&lt;/td&gt; &lt;td align="left"&gt;&lt;/td&gt; &lt;td align="left"&gt;DF11 (Ours)&lt;/td&gt; &lt;td align="left"&gt;✅&lt;/td&gt; &lt;td align="left"&gt;551.22 GB&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;Llama-3.3-70B-Instruct&lt;/td&gt; &lt;td align="left"&gt;1×H200-141G&lt;/td&gt; &lt;td align="left"&gt;BF16&lt;/td&gt; &lt;td align="left"&gt;❌&lt;/td&gt; &lt;td align="left"&gt;141.11 GB&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;&lt;/td&gt; &lt;td align="left"&gt;&lt;/td&gt; &lt;td align="left"&gt;DF11 (Ours)&lt;/td&gt; &lt;td align="left"&gt;✅&lt;/td&gt; &lt;td align="left"&gt;96.14 GB&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;Qwen2.5-32B-Instruct&lt;/td&gt; &lt;td align="left"&gt;1×A6000-48G&lt;/td&gt; &lt;td align="left"&gt;BF16&lt;/td&gt; &lt;td align="left"&gt;❌&lt;/td&gt; &lt;td align="left"&gt;65.53 GB&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;&lt;/td&gt; &lt;td align="left"&gt;&lt;/td&gt; &lt;td align="left"&gt;DF11 (Ours)&lt;/td&gt; &lt;td align="left"&gt;✅&lt;/td&gt; &lt;td align="left"&gt;45.53 GB&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;DeepSeek-R1-Distill-Llama-8B&lt;/td&gt; &lt;td align="left"&gt;1×RTX 5080-16G&lt;/td&gt; &lt;td align="left"&gt;BF16&lt;/td&gt; &lt;td align="left"&gt;❌&lt;/td&gt; &lt;td align="left"&gt;16.06 GB&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;&lt;/td&gt; &lt;td align="left"&gt;&lt;/td&gt; &lt;td align="left"&gt;DF11 (Ours)&lt;/td&gt; &lt;td align="left"&gt;✅&lt;/td&gt; &lt;td align="left"&gt;11.23 GB&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;p&gt;Some research promo posts try to surgercoat their weakness or tradeoff, thats not us. So here's are some honest FAQs:&lt;/p&gt; &lt;h1&gt;What’s the catch?&lt;/h1&gt; &lt;p&gt;Like all compression work, there’s a cost to decompressing. And here are some efficiency reports.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;On an A100 with batch size 128, DF11 is &lt;strong&gt;basically just as fast&lt;/strong&gt; as BF16 (1.02x difference, assuming both version fits in the GPUs with the same batch size). See Figure 9.&lt;/li&gt; &lt;li&gt;It is up to &lt;strong&gt;38.8x faster&lt;/strong&gt; than CPU offloading, so if you have a model that can't be run on your GPU in BF16, but can in DF11, there are plenty sweet performance gains over CPU offloading — one of the other popular way to run larger-than-capacity models. See Figure 3.&lt;/li&gt; &lt;li&gt;With the model weight being compressed, you can use the saved real estate for larger batch size or longer context length. This is expecially significant if the model is already tightly fitted in GPU. See Figure 4.&lt;/li&gt; &lt;li&gt;What about batch size 1 latency when both versions (DF11 &amp;amp; BF16) can fit in a single GPU? This is where DF11 is the weakest — we observe &lt;strong&gt;~40% slower&lt;/strong&gt; (2k/100 tokens for in/out). So there is not much motivation in using DF11 if you are not trying to run larger model/bigger batch size/longer sequence length.&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;Why not just (lossy) quantize to 8-bit?&lt;/h1&gt; &lt;p&gt;&lt;strong&gt;The short answer is you should totally do that if you are satisfied with the output lossy 8-bit quantization with respect to your task. But how do you really know it is always good?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Many benchmark literature suggest that compressing a model (weight-only or otherwise) to 8-bit-ish is typically a safe operation, even though it's technically lossy. What we found, however, is that while this claim is often made in quantization papers, their benchmarks tend to focus on general tasks like MMLU and Commonsense Reasoning; which do not present a comprehensive picture of model capability.&lt;/p&gt; &lt;p&gt;More challenging benchmarks — such as those involving complex reasoning — and real-world user preferences often reveal noticeable differences. One good example is Chatbot Arena indicates the 8-bit (though it is W8A8 where DF11 is weight only, so it is not 100% apple-to-apple) and 16-bit Llama 3.1 405b tend to behave quite differently on some categories of tasks (e.g., Math and Coding).&lt;/p&gt; &lt;p&gt;Although the broader question: &lt;em&gt;“Which specific task, on which model, using which quantization technique, under what conditions, will lead to a noticeable drop compared to FP16/BF16?”&lt;/em&gt; is likely to remain open-ended simply due to the sheer amount of potential combinations and definition of “noticable.” &lt;strong&gt;It is fair to say that lossy quantization introduces complexities that some end-users would prefer to avoid, since it creates uncontrolled variables that must be empirically stress-tested for each deployment scenario.&lt;/strong&gt; DF11 offeres an alternative that avoids this concern 100%.&lt;/p&gt; &lt;h1&gt;What about finetuning?&lt;/h1&gt; &lt;p&gt;Our method could potentially pair well with PEFT methods like LoRA, where the base weights are frozen. But since we compress block-wise, we can’t just apply it naively without breaking gradients. We're actively exploring this direction. If it works, if would potentially become a QLoRA alternative where you can lossly LoRA finetune a model with reduced memory footprint.&lt;/p&gt; &lt;p&gt;(As always, happy to answer questions or chat until my advisor notices I’m doomscrolling socials during work hours :&amp;gt; )&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Paper: &lt;a href="https://arxiv.org/abs/2504.11651"&gt;https://arxiv.org/abs/2504.11651&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Code: &lt;a href="https://github.com/LeanModels/DFloat11"&gt;https://github.com/LeanModels/DFloat11&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/choHZ"&gt; /u/choHZ &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7o89n/we_compress_any_bf16_model_to_70_size_during/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k7o89n/we_compress_any_bf16_model_to_70_size_during/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k7o89n/we_compress_any_bf16_model_to_70_size_during/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-25T15:47:29+00:00</published>
  </entry>
  <entry>
    <id>t3_1k8bodt</id>
    <title>Llama 3.3 70B Q40: eval 7.2 tok/s, pred 3.3 tok/s on 4 x NVIDIA RTX 3060 12 GB (GPU cost: $1516)</title>
    <updated>2025-04-26T12:20:59+00:00</updated>
    <author>
      <name>/u/b4rtaz</name>
      <uri>https://old.reddit.com/user/b4rtaz</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k8bodt/llama_33_70b_q40_eval_72_toks_pred_33_toks_on_4_x/"&gt; &lt;img alt="Llama 3.3 70B Q40: eval 7.2 tok/s, pred 3.3 tok/s on 4 x NVIDIA RTX 3060 12 GB (GPU cost: $1516)" src="https://external-preview.redd.it/B1TF2IQo6iquhmu5K16ixy7w2XYeK22BYOFGGiutRMc.jpg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=6c09552066bc18c0bbffa03e596104499ea5c504" title="Llama 3.3 70B Q40: eval 7.2 tok/s, pred 3.3 tok/s on 4 x NVIDIA RTX 3060 12 GB (GPU cost: $1516)" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/b4rtaz"&gt; /u/b4rtaz &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://github.com/b4rtaz/distributed-llama/discussions/205"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k8bodt/llama_33_70b_q40_eval_72_toks_pred_33_toks_on_4_x/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k8bodt/llama_33_70b_q40_eval_72_toks_pred_33_toks_on_4_x/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T12:20:59+00:00</published>
  </entry>
  <entry>
    <id>t3_1k8aput</id>
    <title>LangoTango - A local language model powered language learning partner</title>
    <updated>2025-04-26T11:23:55+00:00</updated>
    <author>
      <name>/u/shokuninstudio</name>
      <uri>https://old.reddit.com/user/shokuninstudio</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k8aput/langotango_a_local_language_model_powered/"&gt; &lt;img alt="LangoTango - A local language model powered language learning partner" src="https://b.thumbs.redditmedia.com/lyZDij5G9j7z2Yk-cHHcn18tC7IFPbWsmBtOUr5HdYs.jpg" title="LangoTango - A local language model powered language learning partner" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi all,&lt;/p&gt; &lt;p&gt;Put this together over the week. It's a fork of another app I made called Dillon, but in this case I optimised it for language learning. It can be forked for all sorts of different hobbies. You could make a fork for personal recipe books or exercise diaries for example.&lt;/p&gt; &lt;p&gt;Here's the repo:&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/shokuninstudio/LangoTango"&gt;https://github.com/shokuninstudio/LangoTango&lt;/a&gt;&lt;/p&gt; &lt;p&gt;macOS and Windows binaries are ready to download.&lt;/p&gt; &lt;p&gt;If you want to build it for Linux it's easy with pyinstaller and should work. I have not been able to test on Linux as I only have VMs at the moment. I need some drivers (not available) to run Linux native on my laptop.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/shokuninstudio"&gt; /u/shokuninstudio &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/gallery/1k8aput"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k8aput/langotango_a_local_language_model_powered/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k8aput/langotango_a_local_language_model_powered/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T11:23:55+00:00</published>
  </entry>
  <entry>
    <id>t3_1k88v0p</id>
    <title>Newelle 0.9.5 Released: Internet Access, Improved Document Reading</title>
    <updated>2025-04-26T09:15:18+00:00</updated>
    <author>
      <name>/u/iTzSilver_YT</name>
      <uri>https://old.reddit.com/user/iTzSilver_YT</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k88v0p/newelle_095_released_internet_access_improved/"&gt; &lt;img alt="Newelle 0.9.5 Released: Internet Access, Improved Document Reading" src="https://preview.redd.it/6n7tbbk5c5xe1.gif?width=640&amp;amp;crop=smart&amp;amp;s=c94def82cef2aab0509b503092cef40a3a4c19f3" title="Newelle 0.9.5 Released: Internet Access, Improved Document Reading" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Newelle 0.9.5 Released! Newelle is an advanced AI assistant for Linux supporting any LLM (Local or Online), voice commands, extensions and much more!&lt;/p&gt; &lt;p&gt;🔎 Implemented Web Search with SearXNG, DuckDuckGo, and Tavily&lt;br /&gt; 🌐 Website Reading: ask questions about websites (Write #url to embed it)&lt;br /&gt; 🔢 Improved inline LaTeX support&lt;br /&gt; 🗣 New empty chat placeholder&lt;br /&gt; 📎 Improved Document reading: semantic search will only be done if the document is too long&lt;br /&gt; 💭 New thinking widget&lt;br /&gt; 🧠 Add vision support for llama4 on Groq and possibility to choose provider on OpenRouter&lt;br /&gt; 🌍 New translations (Traditional Chinese, Bengali, Hindi)&lt;br /&gt; 🐞 Various bug fixes&lt;/p&gt; &lt;p&gt;Source Code: &lt;a href="https://github.com/qwersyk/Newelle/"&gt;https://github.com/qwersyk/Newelle/&lt;/a&gt;&lt;br /&gt; Flathub: &lt;a href="https://flathub.org/apps/io.github.qwersyk.Newelle"&gt;https://flathub.org/apps/io.github.qwersyk.Newelle&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/iTzSilver_YT"&gt; /u/iTzSilver_YT &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/6n7tbbk5c5xe1.gif"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k88v0p/newelle_095_released_internet_access_improved/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k88v0p/newelle_095_released_internet_access_improved/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T09:15:18+00:00</published>
  </entry>
  <entry>
    <id>t3_1k8601g</id>
    <title>Qwen AI - My most used LLM!</title>
    <updated>2025-04-26T05:56:59+00:00</updated>
    <author>
      <name>/u/Glittering-Cancel-25</name>
      <uri>https://old.reddit.com/user/Glittering-Cancel-25</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I use Qwen, DeepSeek, paid ChatGPT, and paid Claude. I must say, i find myself using Qwen the most often. It's great, especially for a free model! &lt;/p&gt; &lt;p&gt;I use all of the LLMs for general and professional work. E.g., writing, planning, management, self-help, idea generation, etc. For most of those things, i just find that Qwen produces the best results and requires the least rework, follow ups, etc. I've tested all of the LLMs by putting in the exact same prompt (i've probably done this a couple dozen times) and overall (but not always), Qwen produces the best result for me. I absolutely can't wait until they release Qwen3 Max! I also have a feeling DeepSeek is gonna go with with R2... &lt;/p&gt; &lt;p&gt;Id love to know what LLM you find yourself using the most, what you use them for (that makes a big difference), and why you think that one is the best. &lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Glittering-Cancel-25"&gt; /u/Glittering-Cancel-25 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k8601g/qwen_ai_my_most_used_llm/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1k8601g/qwen_ai_my_most_used_llm/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1k8601g/qwen_ai_my_most_used_llm/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-04-26T05:56:59+00:00</published>
  </entry>
</feed>
