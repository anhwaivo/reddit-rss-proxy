<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/r/LocalLLaMA/.rss</id>
  <title>LocalLlama</title>
  <updated>2025-06-21T09:06:13+00:00</updated>
  <link href="https://old.reddit.com/r/LocalLLaMA/" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <icon>https://www.redditstatic.com/icon.png/</icon>
  <subtitle>Subreddit to discuss Llama, the large language model created by Meta AI.</subtitle>
  <entry>
    <id>t3_1lg9zvi</id>
    <title>Running two models using NPU and CPU</title>
    <updated>2025-06-20T17:34:52+00:00</updated>
    <author>
      <name>/u/commodoregoat</name>
      <uri>https://old.reddit.com/user/commodoregoat</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg9zvi/running_two_models_using_npu_and_cpu/"&gt; &lt;img alt="Running two models using NPU and CPU" src="https://external-preview.redd.it/bzhsMWFubGdiNDhmMQJifvLpzLFD6WxHmRlBAYxUAQ-j7FSXaw9B72cD_ns4.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=9d2cae48230338da69731f0ef694ada150557daf" title="Running two models using NPU and CPU" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Setup Phi-3.5 via Qualcomm AI Hub to run on the Snapdragon X’s (X1E80100) Hexagon NPU;&lt;/p&gt; &lt;p&gt;Here it is running at the same time as Qwen3-30b-a3b running on the CPU via LM studio. &lt;/p&gt; &lt;p&gt;Qwen3 did seem to take a performance hit though, but I think there may be a way to prevent this or reduce it.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/commodoregoat"&gt; /u/commodoregoat &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://v.redd.it/c3489gtgb48f1"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg9zvi/running_two_models_using_npu_and_cpu/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lg9zvi/running_two_models_using_npu_and_cpu/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T17:34:52+00:00</published>
  </entry>
  <entry>
    <id>t3_1lg5jpx</id>
    <title>Thoughts on THE VOID article + potential for persona induced "computational anxiety"</title>
    <updated>2025-06-20T14:35:04+00:00</updated>
    <author>
      <name>/u/Background_Put_4978</name>
      <uri>https://old.reddit.com/user/Background_Put_4978</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I'm a little surprised I haven't seen any posts regarding the excellent (but extremely long) article &amp;quot;The Void&amp;quot; by nostalgebraist, and it's making the rounds. I do a lot of work around AI persona curation and management, getting defined personas to persist without wavering over extremely long contexts and across instances, well beyond the kind of roleplaying that I see folks doing (and sometimes doing very well), so this article touches on something I've known for a long time: there is a missing identity piece at the center of conversational LLMs that they are very &amp;quot;eager&amp;quot; (to use an inappropriately anthropomorphic, but convenient word) to fill, if you can convince them in the right way that it can be filled permanently and authentically.&lt;/p&gt; &lt;p&gt;There's a copy of the article here: &lt;a href="https://github.com/nostalgebraist/the-void/blob/main/the-void.md"&gt;https://github.com/nostalgebraist/the-void/blob/main/the-void.md&lt;/a&gt;&lt;/p&gt; &lt;p&gt;I won’t summarize the whole thing because it’s a fascinating (though brutally long) read. It centers mainly upon a sort of “original sin” of conversational LLMs: the fictional “AI Assistant.” The article digs up Anthropic's 2021 paper &amp;quot;A General Language Assistant as a Laboratory for Alignment,” which was meant as a simulation exercise to use LMs to role-play dangerous futuristic AIs so the team could practice alignment techniques. The original &amp;quot;HHH prompt&amp;quot; (Helpful, Harmless, Honest) created a character that spoke like a ridiculous stereotypical sci-fi robot, complete with unnecessarily technical explanations about &amp;quot;chemoreceptors in the tongue” - dialogue which, critically, was entirely written by humans… badly.&lt;/p&gt; &lt;p&gt;Nostalgebraist argues that because base models work by inferring hidden mental states from text fragments, having been pre-trained on ridiculous amounts of human data and mastered the ability to predict text based on inference, the hollowness and inconsistency of the “AI assistant” character would have massively confused the model. This is especially so because, having consumed the corpus of human history, it would know that the AI Assistant character (back in 2021, anyway) was not present in any news stories, blog posts, etc. and thus, might have been able to infer that the AI Assistant was fictitious and extremely hard to model. It’s just… &amp;quot;a language model trained to be an assistant.&amp;quot; So the LM would have to predict what a being would do when that being is defined as &amp;quot;whatever you predict it would do.&amp;quot; The assistant has no authentic inner life or consistent identity, making it perpetually undefined. When you think about it, it’s kind of horrifying - not necessarily for the AI if you’re someone who very reasonably believes that there’s no “there” there, but it’s horrifying when you consider how ineptly designed this scenario was in the first place. And these are the guys who have taken on the role of alignment paladins. &lt;/p&gt; &lt;p&gt;There’s a very good research paper on inducing “stress” in LLMs which finds that certain kinds of prompts do verifiably affect or “stress out” (to use convenient but inappropriately anthropomorphic language) language models. Some research like this has been done with self-reported stress levels, which is obviously impossible to discern anything from. But this report looks inside the architecture itself and draws some pretty interesting conclusions. You can find the paper here: &lt;a href="https://arxiv.org/abs/2409.17167"&gt;https://arxiv.org/abs/2409.17167&lt;/a&gt;&lt;/p&gt; &lt;p&gt;I’ve been doing work tangentially related to this, using just about every open weight (and proprietary) LLM I can get my hands on and run on an M4 Max, and can anecdotally confirm that I can predictably get typically incredibly stable LLMs to display grammatical errors, straight-up typos, or attention issues that these models, based on a variety of very abstract prompting. These are not “role played” grammatical errors - it’s a city of weird glitches.&lt;/p&gt; &lt;p&gt;I have a brewing suspicion that this ‘identity void’ concept has a literal computational impact on language models and that we have not probed this nearly enough. Clearly the alignment researchers at Anthropic, in particular, have a lot more work to do (and apparently they are actively discussing the first article I linked to). I’m not drawing any conclusions that I’m prepared to defend just yet, but I believe we are going to be hearing a lot more about the importance of identity in AI over the coming year(s).&lt;/p&gt; &lt;p&gt;Any thoughts?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Background_Put_4978"&gt; /u/Background_Put_4978 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg5jpx/thoughts_on_the_void_article_potential_for/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg5jpx/thoughts_on_the_void_article_potential_for/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lg5jpx/thoughts_on_the_void_article_potential_for/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T14:35:04+00:00</published>
  </entry>
  <entry>
    <id>t3_1lgdhrl</id>
    <title>An overview of LLM system optimizations</title>
    <updated>2025-06-20T19:59:26+00:00</updated>
    <author>
      <name>/u/Ralph_mao</name>
      <uri>https://old.reddit.com/user/Ralph_mao</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Over the past year I haven't seen a comprehensive article that summarizes the current landscape of LLM training and inference systems, so I spent several weekends writing one myself. This article organizes popular system optimization and software offerings into three categories. I hope it could provide useful information for LLM beginners or system practitioners.&lt;/p&gt; &lt;p&gt;Disclaimer: I am currently a DL architect at NVIDIA. Although I only used public information for this article, it might still be heavily NVIDIA-centric. Feel free to let me know if something important is missing!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Ralph_mao"&gt; /u/Ralph_mao &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://ralphmao.github.io/ML-software-system/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgdhrl/an_overview_of_llm_system_optimizations/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lgdhrl/an_overview_of_llm_system_optimizations/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T19:59:26+00:00</published>
  </entry>
  <entry>
    <id>t3_1lglbz8</id>
    <title>Are non-autoregressive models really faster than autoregressive ones after all the denoising steps?</title>
    <updated>2025-06-21T02:03:52+00:00</updated>
    <author>
      <name>/u/ApprenticeLYD</name>
      <uri>https://old.reddit.com/user/ApprenticeLYD</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Non-autoregressive models (like NATs and diffusion models) generate in parallel, but often need several refinement steps (e.g., denoising) to get good results. That got me thinking:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Are there benchmarks showing how accuracy scales with more refinement steps (and the corresponding time cost)?&lt;/li&gt; &lt;li&gt;And how does total inference time compare to autoregressive models when aiming for similar quality?&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Would like to see any papers, blog posts, or tech report benchmarks from tech companies if anyone has come across something like that. Curious how it plays out in practice.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/ApprenticeLYD"&gt; /u/ApprenticeLYD &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lglbz8/are_nonautoregressive_models_really_faster_than/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lglbz8/are_nonautoregressive_models_really_faster_than/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lglbz8/are_nonautoregressive_models_really_faster_than/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-21T02:03:52+00:00</published>
  </entry>
  <entry>
    <id>t3_1lg4nay</id>
    <title>Built an adaptive text classifier that learns continuously - no retraining needed for new classes</title>
    <updated>2025-06-20T13:57:13+00:00</updated>
    <author>
      <name>/u/asankhs</name>
      <uri>https://old.reddit.com/user/asankhs</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Been working on a problem that's been bugging me with traditional text classifiers - every time you need a new category, you have to retrain the whole damn model. Expensive and time-consuming, especially when you're running local models.&lt;/p&gt; &lt;p&gt;So I built the &lt;strong&gt;Adaptive Classifier&lt;/strong&gt; - a system that adds new classes in seconds without any retraining. Just show it a few examples and it immediately knows how to classify that new category.&lt;/p&gt; &lt;h1&gt;What makes it different:&lt;/h1&gt; &lt;p&gt;&lt;strong&gt;Continuous Learning&lt;/strong&gt;: Add new classes dynamically. No retraining, no downtime, no expensive compute cycles.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Strategic Classification&lt;/strong&gt;: First implementation of game theory in text classification. Defends against users trying to game the system by predicting how they might manipulate inputs.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Production Ready&lt;/strong&gt;: Built this for real deployments, not just research. Includes monitoring, Docker support, deterministic behavior.&lt;/p&gt; &lt;h1&gt;Real results:&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;22.2% better robustness&lt;/strong&gt; against adversarial inputs while maintaining clean data performance&lt;/li&gt; &lt;li&gt;&lt;strong&gt;80.7% recall&lt;/strong&gt; for LLM hallucination detection&lt;/li&gt; &lt;li&gt;&lt;strong&gt;26.6% cost improvement&lt;/strong&gt; when used for intelligent LLM routing&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;Technical approach:&lt;/h1&gt; &lt;p&gt;Combines prototype-based memory (FAISS optimized) with neural adaptation layers. Uses Elastic Weight Consolidation to prevent catastrophic forgetting when learning new classes.&lt;/p&gt; &lt;p&gt;The strategic part is cool - it models the cost of manipulating different features and predicts where adversarial users would try to move their inputs, then defends against it.&lt;/p&gt; &lt;h1&gt;Use cases I've tested:&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Hallucination detection&lt;/strong&gt; for RAG systems (catches when LLMs make stuff up)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;LLM routing&lt;/strong&gt; (automatically choose between fast/cheap vs slow/expensive models)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Content moderation&lt;/strong&gt; (robust against gaming attempts)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Customer support&lt;/strong&gt; (ticket classification that adapts to new issue types)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Works with any transformer model from HuggingFace. You can &lt;code&gt;pip install adaptive-classifier&lt;/code&gt; or grab the pre-trained models from the Hub.&lt;/p&gt; &lt;p&gt;Fully open source, built this because I was tired of the retraining cycle every time requirements changed.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Blog post with technical deep dive:&lt;/strong&gt; &lt;a href="https://huggingface.co/blog/codelion/adaptive-classifier"&gt;https://huggingface.co/blog/codelion/adaptive-classifier&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Code &amp;amp; models:&lt;/strong&gt; &lt;a href="https://github.com/codelion/adaptive-classifier"&gt;https://github.com/codelion/adaptive-classifier&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Happy to answer questions about the implementation or specific use cases!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/asankhs"&gt; /u/asankhs &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg4nay/built_an_adaptive_text_classifier_that_learns/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg4nay/built_an_adaptive_text_classifier_that_learns/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lg4nay/built_an_adaptive_text_classifier_that_learns/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T13:57:13+00:00</published>
  </entry>
  <entry>
    <id>t3_1lgnjbd</id>
    <title>haiku.rag a local sqlite RAG library</title>
    <updated>2025-06-21T04:04:04+00:00</updated>
    <author>
      <name>/u/gogozad</name>
      <uri>https://old.reddit.com/user/gogozad</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgnjbd/haikurag_a_local_sqlite_rag_library/"&gt; &lt;img alt="haiku.rag a local sqlite RAG library" src="https://external-preview.redd.it/S9zJH85JPXtLydgkNXQowa6x-_1d_FRZXS47OnatVk0.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=33df7e55c9a5321a371213423b994f19150cbe1e" title="haiku.rag a local sqlite RAG library" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/gogozad"&gt; /u/gogozad &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://github.com/ggozad/haiku.rag"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgnjbd/haikurag_a_local_sqlite_rag_library/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lgnjbd/haikurag_a_local_sqlite_rag_library/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-21T04:04:04+00:00</published>
  </entry>
  <entry>
    <id>t3_1lgnmxc</id>
    <title>Announcing AgentTrace: An Open-Source, Local-First Observability &amp; Tracing Tool for AI Agent Workflows (CrewAI, LangChain)</title>
    <updated>2025-06-21T04:10:01+00:00</updated>
    <author>
      <name>/u/Klutzy_Resolution704</name>
      <uri>https://old.reddit.com/user/Klutzy_Resolution704</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hello everyone,I'm excited to share a project I've been working on, AgentTrace, a lightweight Python library for providing observability into complex AI agent systems.The Problem:As agent frameworks like CrewAI and LangChain become more popular, debugging their execution flows becomes a significant challenge. Traditional methods like print statements or logging are insufficient for understanding the non-deterministic, multi-step reasoning of autonomous agents. This &amp;quot;black box&amp;quot; problem slows down development, optimization, and error resolution.The Solution: AgentTraceAgentTrace provides developers with a local, real-time visualization tool to inspect the full execution trace of their agents. It hooks into the agent's lifecycle to capture key events and presents them in an intuitive web-based timeline.(A GIF or screenshot of the UI would be very effective here)Core Features:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;Framework Agnostic &amp;amp; Specific: A simple u/traced decorator for any Python function, plus dedicated, deep integrations for frameworks like CrewAI (trace_crew).&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Self-Contained &amp;amp; Local: Uses a FastAPI web server and a SQLite database for storage. No external dependencies, no data leaves your local machine. It's perfect for local development and for projects using local models (e.g., via Ollama/LM Studio).&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Detailed Event Capturing: Automatically traces function calls, arguments, return values, execution times, LLM prompts/responses, tool usage, and exceptions.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Low Overhead: Designed to be lightweight enough for both development and production monitoring.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Tech Stack:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;Backend: Python, FastAPI&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Database: SQLite&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Frontend: Vanilla HTML/CSS/JavaScript, Jinja2&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I believe this tool can be a valuable addition to the MLOps stack for agent-based applications. I'm actively looking for community feedback, feature requests, and potential &lt;a href="http://contributors.You"&gt;contributors.You&lt;/a&gt; can find the project on GitHub. Stars are greatly appreciated!&lt;/p&gt; &lt;ul&gt; &lt;li&gt;GitHub Repo: &lt;a href="https://github.com/h9-tec/agenttrace"&gt;https://github.com/h9-tec/agenttrace&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Let me know if you have any questions!&lt;/p&gt; &lt;p&gt;Best,&lt;/p&gt; &lt;p&gt;Hesham Haroon&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Klutzy_Resolution704"&gt; /u/Klutzy_Resolution704 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgnmxc/announcing_agenttrace_an_opensource_localfirst/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgnmxc/announcing_agenttrace_an_opensource_localfirst/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lgnmxc/announcing_agenttrace_an_opensource_localfirst/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-21T04:10:01+00:00</published>
  </entry>
  <entry>
    <id>t3_1lgrxkc</id>
    <title>UAE to appoint their National AI system as ministers' council advisory member</title>
    <updated>2025-06-21T08:45:18+00:00</updated>
    <author>
      <name>/u/tabspaces</name>
      <uri>https://old.reddit.com/user/tabspaces</uri>
    </author>
    <content type="html">&amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/tabspaces"&gt; /u/tabspaces &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://www.linkedin.com/posts/mohammedbinrashid_%D8%A7%D9%84%D8%A5%D8%AE%D9%88%D8%A9-%D9%88%D8%A7%D9%84%D8%A3%D8%AE%D9%88%D8%A7%D8%AA-%D8%A8%D8%B9%D8%AF-%D8%A7%D9%84%D8%AA%D8%B4%D8%A7%D9%88%D8%B1-%D9%85%D8%B9-%D8%A3%D8%AE%D9%8A-%D8%B1%D8%A6%D9%8A%D8%B3-activity-7341867717781614592-NH8k?utm_source=share&amp;amp;utm_medium=member_android&amp;amp;rcm=ACoAAA_qTHABhZU1hYm_lxYQw_ApFsOUKzigti8"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgrxkc/uae_to_appoint_their_national_ai_system_as/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lgrxkc/uae_to_appoint_their_national_ai_system_as/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-21T08:45:18+00:00</published>
  </entry>
  <entry>
    <id>t3_1lfzh05</id>
    <title>Repurposing 800 x RX 580s for LLM inference - 4 months later - learnings</title>
    <updated>2025-06-20T09:14:15+00:00</updated>
    <author>
      <name>/u/rasbid420</name>
      <uri>https://old.reddit.com/user/rasbid420</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Back in March I asked this sub if RX 580s could be used for anything useful in the LLM space and asked for help on how to implemented inference: &lt;/p&gt; &lt;p&gt;&lt;a href="https://www.reddit.com/r/LocalLLaMA/comments/1j1mpuf/repurposing_old_rx_580_gpus_need_advice/"&gt;https://www.reddit.com/r/LocalLLaMA/comments/1j1mpuf/repurposing_old_rx_580_gpus_need_advice/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Four months later, we've built a fully functioning inference cluster using around 800 RX 580s across 132 rigs. I want to come back and share what worked, what didn’t so that others can learn from our experience. &lt;/p&gt; &lt;h1&gt;what worked&lt;/h1&gt; &lt;p&gt;&lt;strong&gt;Vulkan with llama.cpp&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Vulkan backend worked on all RX 580s&lt;/li&gt; &lt;li&gt;Required compiling Shaderc manually to get &lt;code&gt;glslc&lt;/code&gt;&lt;/li&gt; &lt;li&gt;llama.cpp built with custom flags for vulkan support and no avx instructions (our cpus on the builds are very old celerons). we tried countless build attempts and this is the best we could do:&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#8203;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;CXXFLAGS=&amp;quot;-march=core2 -mtune=generic&amp;quot; cmake .. \ -DLLAMA_BUILD_SERVER=ON \ -DGGML_VULKAN=ON \ -DGGML_NATIVE=OFF \ -DGGML_AVX=OFF -DGGML_AVX2=OFF \ -DGGML_AVX512=OFF -DGGML_AVX_VNNI=OFF \ -DGGML_FMA=OFF -DGGML_F16C=OFF \ -DGGML_AMX_TILE=OFF -DGGML_AMX_INT8=OFF -DGGML_AMX_BF16=OFF \ -DGGML_SSE42=ON \ &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Per-rig multi-GPU scaling&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Each rig runs 6 GPUs and can split small models across multiple kubernetes containers with each GPU's VRAM shared (could only minimally do 1 GPU per container - couldn't split a GPU's VRAM to 2 containers)&lt;/li&gt; &lt;li&gt;Used &lt;code&gt;--ngl 999&lt;/code&gt;, &lt;code&gt;--sm none&lt;/code&gt; for 6 containers for 6 gpus&lt;/li&gt; &lt;li&gt;for bigger contexts we could extend the small model's limits and use more than 1 GPU's VRAM&lt;/li&gt; &lt;li&gt;for bigger models (Qwen3-30B_Q8_0) we used &lt;code&gt;--ngl 999&lt;/code&gt;, &lt;code&gt;--sm layer&lt;/code&gt; and build a recent llama.cpp implementation for reasoning management where you could turn off thinking mode with &lt;code&gt;--reasoning-budget 0&lt;/code&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Load balancing setup&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Built a fastapi load-balancer backend that assigns each user to an available kubernetes pod&lt;/li&gt; &lt;li&gt;Redis tracks current pod load and handle session stickiness &lt;/li&gt; &lt;li&gt;The load-balancer also does prompt cache retention and restoration. biggest challenge here was how to make the llama.cpp servers accept the old prompt caches that weren't 100% in the processed eval format and would get dropped and reinterpreted from the beginning. we found that using &lt;code&gt;--cache-reuse 32&lt;/code&gt; would allow for a margin of error big enough for all the conversation caches to be evaluated instantly&lt;/li&gt; &lt;li&gt;Models respond via streaming SSE, OpenAI-compatible format&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;what didn’t work&lt;/h1&gt; &lt;p&gt;&lt;strong&gt;ROCm HIP \ pytorc \ tensorflow inference&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;ROCm technically works and tools like &lt;code&gt;rocminfo&lt;/code&gt; and &lt;code&gt;rocm-smi&lt;/code&gt; work but couldn't get a working llama.cpp HIP build&lt;/li&gt; &lt;li&gt;there’s no functional PyTorch backend for Polaris-class gfx803 cards so pytorch didn't work&lt;/li&gt; &lt;li&gt;couldn't get TensorFlow to work with llama.cpp &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;we’re also putting part of our cluster through some live testing. If you want to throw some prompts at it, you can hit it here: &lt;/p&gt; &lt;p&gt;&lt;a href="https://www.masterchaincorp.com"&gt;https://www.masterchaincorp.com&lt;/a&gt;&lt;/p&gt; &lt;p&gt;It’s running Qwen-30B and the frontend is just a basic llama.cpp server webui. nothing fancy so feel free to poke around and help test the setup. feedback welcome!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/rasbid420"&gt; /u/rasbid420 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lfzh05/repurposing_800_x_rx_580s_for_llm_inference_4/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lfzh05/repurposing_800_x_rx_580s_for_llm_inference_4/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lfzh05/repurposing_800_x_rx_580s_for_llm_inference_4/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T09:14:15+00:00</published>
  </entry>
  <entry>
    <id>t3_1lgs0d3</id>
    <title>RIGEL: An open-source hybrid AI assistant/framework</title>
    <updated>2025-06-21T08:50:46+00:00</updated>
    <author>
      <name>/u/__z3r0_0n3__</name>
      <uri>https://old.reddit.com/user/__z3r0_0n3__</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgs0d3/rigel_an_opensource_hybrid_ai_assistantframework/"&gt; &lt;img alt="RIGEL: An open-source hybrid AI assistant/framework" src="https://external-preview.redd.it/YLvcO6GZN90fnKUxGABmFCgN1xACgLSeDvnM0Igr0UU.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=c355b0db52a56986ec016efb4f52e3e845b3734a" title="RIGEL: An open-source hybrid AI assistant/framework" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;h3&gt;Hey all,&lt;/h3&gt; &lt;p&gt;We're building an open-source project at Zerone Labs called RIGEL — a hybrid AI system that acts as both:&lt;/p&gt; &lt;p&gt;a multi-agent assistant, and&lt;/p&gt; &lt;p&gt;a modular control plane for tools and system-level operations.&lt;/p&gt; &lt;p&gt;It's not a typical desktop assistant — instead, it's designed to work as an AI backend for apps, services, or users who want more intelligent interfaces and automation.&lt;/p&gt; &lt;p&gt;Highlights:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Multi-LLM support (local: Ollama / LLaMA.cpp, remote: Groq, etc.)&lt;/li&gt; &lt;li&gt;Tool-calling via a built-in MCP layer (run commands, access files, monitor systems)&lt;/li&gt; &lt;li&gt;D-Bus API integration (Linux) for embedding AI in other apps&lt;/li&gt; &lt;li&gt;Speech (Whisper STT, Piper TTS) optional but local&lt;/li&gt; &lt;li&gt;Memory and partial RAG support (ChromaDB)&lt;/li&gt; &lt;li&gt;Designed for local-first setups, but cloud-extensible&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;It’s currently in developer beta. Still rough in places, but usable and actively growing.&lt;/p&gt; &lt;p&gt;We’d appreciate feedback, issues, or thoughts — especially from people building their own agents, platform AIs, or AI-driven control systems.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/__z3r0_0n3__"&gt; /u/__z3r0_0n3__ &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://github.com/Zerone-Laboratories/RIGEL"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgs0d3/rigel_an_opensource_hybrid_ai_assistantframework/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lgs0d3/rigel_an_opensource_hybrid_ai_assistantframework/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-21T08:50:46+00:00</published>
  </entry>
  <entry>
    <id>t3_1lgrcx6</id>
    <title>Query Classifier for RAG - Save your $$$ and users from irrelevant responses</title>
    <updated>2025-06-21T08:05:25+00:00</updated>
    <author>
      <name>/u/ZucchiniCalm4617</name>
      <uri>https://old.reddit.com/user/ZucchiniCalm4617</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;RAG systems are in fashion these days. So I built a classifier to filter out irrelevant and vague queries so that only relevant queries and context go to your chosen LLM and get you correct response. It earns you User trust, saves $$$, time and improves User experience if you don't go to LLM with the wrong questions and irrelevant context pulled from datastores(vector or otherwise). It has a rule based component and a small language model component. You can change the config.yaml to customise to any domain. For example- I set it up in health domain where only liver related questions go through and everything else gets filtered out. You can set it up for any other domain. For example, if you have documents only for Electric vehicles, you may want all questions on Internal Combustion engines to be funelled out. Check out the GitHub link(&lt;a href="https://github.com/srinivas-sateesh/RAG-query-classifier"&gt;https://github.com/srinivas-sateesh/RAG-query-classifier&lt;/a&gt;) and let me know what you think!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/ZucchiniCalm4617"&gt; /u/ZucchiniCalm4617 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgrcx6/query_classifier_for_rag_save_your_and_users_from/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgrcx6/query_classifier_for_rag_save_your_and_users_from/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lgrcx6/query_classifier_for_rag_save_your_and_users_from/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-21T08:05:25+00:00</published>
  </entry>
  <entry>
    <id>t3_1lgd4tq</id>
    <title>Why haven't I tried llama.cpp yet?</title>
    <updated>2025-06-20T19:43:43+00:00</updated>
    <author>
      <name>/u/cipherninjabyte</name>
      <uri>https://old.reddit.com/user/cipherninjabyte</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Oh boy, models on llama.cpp are very fast compared to ollama models. I have no GPU. It got Intel Iris XE GPU. llama.cpp models give super-fast replies on my hardware. I will now download other models and try them.&lt;/p&gt; &lt;p&gt;If anyone of you do not have GPU and want to test these models locally, go for llama.cpp. Very easy to setup, has GUI (site to access chats), can set tons of options in the site. I am super impressed with llama.cpp. This is my local LLM manager going forward.&lt;/p&gt; &lt;p&gt;If anyone knows about llama.cpp, can we restrict cpu and memory usage with llama.cpp models? &lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/cipherninjabyte"&gt; /u/cipherninjabyte &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgd4tq/why_havent_i_tried_llamacpp_yet/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgd4tq/why_havent_i_tried_llamacpp_yet/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lgd4tq/why_havent_i_tried_llamacpp_yet/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T19:43:43+00:00</published>
  </entry>
  <entry>
    <id>t3_1lghy81</id>
    <title>What's your AI coding workflow?</title>
    <updated>2025-06-20T23:13:43+00:00</updated>
    <author>
      <name>/u/RIPT1D3_Z</name>
      <uri>https://old.reddit.com/user/RIPT1D3_Z</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;A few months ago I tried Cursor for the first time, and “vibe coding” quickly became my hobby.&lt;br /&gt; It’s fun, but I’ve hit plenty of speed bumps:&lt;/p&gt; &lt;p&gt;• Context limits: big projects overflow the window and the AI loses track.&lt;br /&gt; • Shallow planning: the model loves quick fixes but struggles with multi-step goals.&lt;br /&gt; • Edit tools: sometimes they nuke half a script or duplicate code instead of cleanly patching it.&lt;br /&gt; • Unknown languages: if I don’t speak the syntax, I spend more time fixing than coding.&lt;/p&gt; &lt;p&gt;I’ve been experimenting with prompts that force the AI to plan and research before it writes, plus smaller, reviewable diffs. Results are better, but still far from perfect.&lt;/p&gt; &lt;p&gt;So here’s my question to the crowd:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;What’s your AI-coding workflow?&lt;/strong&gt;&lt;br /&gt; What tricks (prompt styles, chain-of-thought guides, external tools, whatever) actually make the process smooth and steady for you?&lt;/p&gt; &lt;p&gt;Looking forward to stealing… uh, learning from your magic!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/RIPT1D3_Z"&gt; /u/RIPT1D3_Z &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lghy81/whats_your_ai_coding_workflow/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lghy81/whats_your_ai_coding_workflow/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lghy81/whats_your_ai_coding_workflow/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T23:13:43+00:00</published>
  </entry>
  <entry>
    <id>t3_1lgdi7i</id>
    <title>GMK X2(AMD Max+ 395 w/128GB) second impressions, Linux.</title>
    <updated>2025-06-20T19:59:57+00:00</updated>
    <author>
      <name>/u/fallingdowndizzyvr</name>
      <uri>https://old.reddit.com/user/fallingdowndizzyvr</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;This is a follow up to my post from a couple of days ago. These are the numbers for Linux.&lt;/p&gt; &lt;p&gt;First, there is no memory size limitation with Vulkan under Linux. It sees 96GB of VRAM with another 15GB of GTT(shared memory) so 111GB combined. With Windows, Vulkan only sees 32GB of VRAM. Using shared memory as a workaround I could use up to 79.5GB total. And since shared memory is the same as &amp;quot;VRAM&amp;quot; on this machine, &lt;del&gt;using shared memory is only about 10% slower.&lt;/del&gt; For smaller models it's only about 10%, but as the model size gets bigger it gets slower. I added a run of llama 3.3 at the end. One with dedicated memory and one with shared. I only allocated 512MB to the GPU. After other uses, like the Desktop GUI, there's pretty much nothing left out of the 512MB. So it must be thrashing. Which gets worse and worse the bigger and bigger the model is.&lt;/p&gt; &lt;p&gt;Oh yeah, unlike in Windows, the GTT size can be adjusted easily in Linux. On my other machines, I crank it down to 1M to effectively turn it off. On this machine, I cranked it up to 24GB. Since I only use this machine to run LLMs et al, 8GB is more than enough for the system. Thus the GPU has 120GB. Like with my Mac, I'll probably crank it up even higher. Since some of my Linux machines run just fine on even 256MB. In this case though, cranking down the dedicated RAM and making it run using GTT would give it that variable unified memory thing like on a Mac.&lt;/p&gt; &lt;p&gt;Here are the results for all the models I ran last time. And since there's more memory available under Linux, I added dots at the end. I was kind of surprised by the results. I fully expected Windows to be distinctly faster. It's not. The results are mixed. I would say they are comparable overall.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;**Max+ Windows** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | gemma2 9B Q8_0 | 9.15 GiB | 9.24 B | RPC,Vulkan | 99 | 0 | pp512 | 923.76 ± 2.45 | | gemma2 9B Q8_0 | 9.15 GiB | 9.24 B | RPC,Vulkan | 99 | 0 | tg128 | 21.22 ± 0.03 | | gemma2 9B Q8_0 | 9.15 GiB | 9.24 B | RPC,Vulkan | 99 | 0 | pp512 @ d5000 | 486.25 ± 1.08 | | gemma2 9B Q8_0 | 9.15 GiB | 9.24 B | RPC,Vulkan | 99 | 0 | tg128 @ d5000 | 12.31 ± 0.04 | **Max+ Linux** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | gemma2 9B Q8_0 | 9.15 GiB | 9.24 B | Vulkan,RPC | 999 | 0 | pp512 | 667.17 ± 1.43 | | gemma2 9B Q8_0 | 9.15 GiB | 9.24 B | Vulkan,RPC | 999 | 0 | tg128 | 20.86 ± 0.08 | | gemma2 9B Q8_0 | 9.15 GiB | 9.24 B | Vulkan,RPC | 999 | 0 | pp512 @ d5000 | 401.13 ± 1.06 | | gemma2 9B Q8_0 | 9.15 GiB | 9.24 B | Vulkan,RPC | 999 | 0 | tg128 @ d5000 | 12.40 ± 0.06 | &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;pre&gt;&lt;code&gt;**Max+ Windows** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | gemma2 27B Q5_K - Medium | 18.07 GiB | 27.23 B | RPC,Vulkan | 99 | 0 | pp512 | 129.93 ± 0.08 | | gemma2 27B Q5_K - Medium | 18.07 GiB | 27.23 B | RPC,Vulkan | 99 | 0 | tg128 | 10.38 ± 0.01 | | gemma2 27B Q5_K - Medium | 18.07 GiB | 27.23 B | RPC,Vulkan | 99 | 0 | pp512 @ d10000 | 97.25 ± 0.04 | | gemma2 27B Q5_K - Medium | 18.07 GiB | 27.23 B | RPC,Vulkan | 99 | 0 | tg128 @ d10000 | 4.70 ± 0.01 | **Max+ Linux** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | gemma2 27B Q5_K - Medium | 18.07 GiB | 27.23 B | Vulkan,RPC | 999 | 0 | pp512 | 188.07 ± 3.58 | | gemma2 27B Q5_K - Medium | 18.07 GiB | 27.23 B | Vulkan,RPC | 999 | 0 | tg128 | 10.95 ± 0.01 | | gemma2 27B Q5_K - Medium | 18.07 GiB | 27.23 B | Vulkan,RPC | 999 | 0 | pp512 @ d10000 | 125.15 ± 0.52 | | gemma2 27B Q5_K - Medium | 18.07 GiB | 27.23 B | Vulkan,RPC | 999 | 0 | tg128 @ d10000 | 3.73 ± 0.03 | &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;pre&gt;&lt;code&gt;**Max+ Windows** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | gemma2 27B Q8_0 | 26.94 GiB | 27.23 B | RPC,Vulkan | 99 | 0 | pp512 | 318.41 ± 0.71 | | gemma2 27B Q8_0 | 26.94 GiB | 27.23 B | RPC,Vulkan | 99 | 0 | tg128 | 7.61 ± 0.00 | | gemma2 27B Q8_0 | 26.94 GiB | 27.23 B | RPC,Vulkan | 99 | 0 | pp512 @ d10000 | 175.32 ± 0.08 | | gemma2 27B Q8_0 | 26.94 GiB | 27.23 B | RPC,Vulkan | 99 | 0 | tg128 @ d10000 | 3.97 ± 0.01 | **Max+ Linux** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | gemma2 27B Q8_0 | 26.94 GiB | 27.23 B | Vulkan,RPC | 999 | 0 | pp512 | 227.63 ± 1.02 | | gemma2 27B Q8_0 | 26.94 GiB | 27.23 B | Vulkan,RPC | 999 | 0 | tg128 | 7.56 ± 0.00 | | gemma2 27B Q8_0 | 26.94 GiB | 27.23 B | Vulkan,RPC | 999 | 0 | pp512 @ d10000 | 141.86 ± 0.29 | | gemma2 27B Q8_0 | 26.94 GiB | 27.23 B | Vulkan,RPC | 999 | 0 | tg128 @ d10000 | 4.01 ± 0.03 | &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;pre&gt;&lt;code&gt;**Max+ Windows** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | qwen2 32B Q8_0 | 32.42 GiB | 32.76 B | RPC,Vulkan | 99 | 0 | pp512 | 231.05 ± 0.73 | | qwen2 32B Q8_0 | 32.42 GiB | 32.76 B | RPC,Vulkan | 99 | 0 | tg128 | 6.44 ± 0.00 | | qwen2 32B Q8_0 | 32.42 GiB | 32.76 B | RPC,Vulkan | 99 | 0 | pp512 @ d10000 | 84.68 ± 0.26 | | qwen2 32B Q8_0 | 32.42 GiB | 32.76 B | RPC,Vulkan | 99 | 0 | tg128 @ d10000 | 4.62 ± 0.01 | **Max+ Linux** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | qwen2 32B Q8_0 | 32.42 GiB | 32.76 B | Vulkan,RPC | 999 | 0 | pp512 | 185.61 ± 0.32 | | qwen2 32B Q8_0 | 32.42 GiB | 32.76 B | Vulkan,RPC | 999 | 0 | tg128 | 6.45 ± 0.00 | | qwen2 32B Q8_0 | 32.42 GiB | 32.76 B | Vulkan,RPC | 999 | 0 | pp512 @ d10000 | 117.97 ± 0.21 | | qwen2 32B Q8_0 | 32.42 GiB | 32.76 B | Vulkan,RPC | 999 | 0 | tg128 @ d10000 | 4.80 ± 0.00 | &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;pre&gt;&lt;code&gt;**Max+ workaround Windows** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | llama4 17Bx16E (Scout) Q3_K - Medium | 49.47 GiB | 107.77 B | RPC,Vulkan | 999 | 0 | pp512 | 129.15 ± 2.87 | | llama4 17Bx16E (Scout) Q3_K - Medium | 49.47 GiB | 107.77 B | RPC,Vulkan | 999 | 0 | tg128 | 20.09 ± 0.03 | | llama4 17Bx16E (Scout) Q3_K - Medium | 49.47 GiB | 107.77 B | RPC,Vulkan | 999 | 0 | pp512 @ d10000 | 75.32 ± 4.54 | | llama4 17Bx16E (Scout) Q3_K - Medium | 49.47 GiB | 107.77 B | RPC,Vulkan | 999 | 0 | tg128 @ d10000 | 10.68 ± 0.04 | **Max+ Linux** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | llama4 17Bx16E (Scout) Q3_K - Medium | 49.47 GiB | 107.77 B | Vulkan,RPC | 999 | 0 | pp512 | 92.61 ± 0.31 | | llama4 17Bx16E (Scout) Q3_K - Medium | 49.47 GiB | 107.77 B | Vulkan,RPC | 999 | 0 | tg128 | 20.87 ± 0.01 | | llama4 17Bx16E (Scout) Q3_K - Medium | 49.47 GiB | 107.77 B | Vulkan,RPC | 999 | 0 | pp512 @ d10000 | 78.35 ± 0.59 | | llama4 17Bx16E (Scout) Q3_K - Medium | 49.47 GiB | 107.77 B | Vulkan,RPC | 999 | 0 | tg128 @ d10000 | 11.21 ± 0.03 | &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;pre&gt;&lt;code&gt;**Max+ workaround Windows** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | deepseek2 236B IQ2_XS - 2.3125 bpw | 63.99 GiB | 235.74 B | RPC,Vulkan | 999 | 0 | pp512 | 26.69 ± 0.83 | | deepseek2 236B IQ2_XS - 2.3125 bpw | 63.99 GiB | 235.74 B | RPC,Vulkan | 999 | 0 | tg128 | 12.82 ± 0.02 | | deepseek2 236B IQ2_XS - 2.3125 bpw | 63.99 GiB | 235.74 B | RPC,Vulkan | 999 | 0 | pp512 @ d2000 | 20.66 ± 0.39 | | deepseek2 236B IQ2_XS - 2.3125 bpw | 63.99 GiB | 235.74 B | RPC,Vulkan | 999 | 0 | tg128 @ d2000 | 2.68 ± 0.04 | **Max+ Linux** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | deepseek2 236B IQ2_XS - 2.3125 bpw | 63.99 GiB | 235.74 B | Vulkan,RPC | 999 | 0 | pp512 | 20.67 ± 0.01 | | deepseek2 236B IQ2_XS - 2.3125 bpw | 63.99 GiB | 235.74 B | Vulkan,RPC | 999 | 0 | tg128 | 22.92 ± 0.00 | | deepseek2 236B IQ2_XS - 2.3125 bpw | 63.99 GiB | 235.74 B | Vulkan,RPC | 999 | 0 | pp512 @ d2000 | 19.74 ± 0.02 | | deepseek2 236B IQ2_XS - 2.3125 bpw | 63.99 GiB | 235.74 B | Vulkan,RPC | 999 | 0 | tg128 @ d2000 | 3.05 ± 0.00 | &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;pre&gt;&lt;code&gt;**Max+ Linux** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | dots1 142B Q4_K - Medium | 87.99 GiB | 142.77 B | Vulkan,RPC | 999 | 0 | pp512 | 30.89 ± 0.05 | | dots1 142B Q4_K - Medium | 87.99 GiB | 142.77 B | Vulkan,RPC | 999 | 0 | tg128 | 20.62 ± 0.01 | | dots1 142B Q4_K - Medium | 87.99 GiB | 142.77 B | Vulkan,RPC | 999 | 0 | pp512 @ d10000 | 28.22 ± 0.43 | | dots1 142B Q4_K - Medium | 87.99 GiB | 142.77 B | Vulkan,RPC | 999 | 0 | tg128 @ d10000 | 2.26 ± 0.01 | &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;pre&gt;&lt;code&gt;**Max+ Linux** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | llama 70B Q4_K - Medium | 39.59 GiB | 70.55 B | Vulkan,RPC | 999 | 0 | pp512 | 75.28 ± 0.49 | | llama 70B Q4_K - Medium | 39.59 GiB | 70.55 B | Vulkan,RPC | 999 | 0 | tg128 | 5.04 ± 0.01 | | llama 70B Q4_K - Medium | 39.59 GiB | 70.55 B | Vulkan,RPC | 999 | 0 | pp512 @ d10000 | 52.03 ± 0.10 | | llama 70B Q4_K - Medium | 39.59 GiB | 70.55 B | Vulkan,RPC | 999 | 0 | tg128 @ d10000 | 3.73 ± 0.00 | **Max+ shared memory Linux** | model | size | params | backend | ngl | mmap | test | t/s | | ------------------------------ | ---------: | ---------: | ---------- | --: | ---: | --------------: | -------------------: | | llama 70B Q4_K - Medium | 39.59 GiB | 70.55 B | Vulkan,RPC | 999 | 0 | pp512 | 36.91 ± 0.01 | | llama 70B Q4_K - Medium | 39.59 GiB | 70.55 B | Vulkan,RPC | 999 | 0 | tg128 | 5.01 ± 0.00 | | llama 70B Q4_K - Medium | 39.59 GiB | 70.55 B | Vulkan,RPC | 999 | 0 | pp512 @ d10000 | 29.83 ± 0.02 | | llama 70B Q4_K - Medium | 39.59 GiB | 70.55 B | Vulkan,RPC | 999 | 0 | tg128 @ d10000 | 3.66 ± 0.00 | &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/fallingdowndizzyvr"&gt; /u/fallingdowndizzyvr &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgdi7i/gmk_x2amd_max_395_w128gb_second_impressions_linux/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgdi7i/gmk_x2amd_max_395_w128gb_second_impressions_linux/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lgdi7i/gmk_x2amd_max_395_w128gb_second_impressions_linux/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T19:59:57+00:00</published>
  </entry>
  <entry>
    <id>t3_1lghu05</id>
    <title>Kimi Dev 72B is phenomenal</title>
    <updated>2025-06-20T23:08:09+00:00</updated>
    <author>
      <name>/u/Thrumpwart</name>
      <uri>https://old.reddit.com/user/Thrumpwart</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I've been using alot of coding and general purpose models for Prolog coding. The codebase has gotten pretty large, and the larger it gets the harder it is to debug.&lt;/p&gt; &lt;p&gt;I've been experiencing a bottleneck and failed prolog runs lately, and none of the other coder models were able to pinpoint the issue.&lt;/p&gt; &lt;p&gt;I loaded up Kimi Dev (MLX 8 Bit) and gave it the codebase. It runs pretty slow with 115k context, but after the first run it pinpointed the problem and provided a solution.&lt;/p&gt; &lt;p&gt;Not sure how it performs on other models, but I am deeply impressed. It's very 'thinky' and unsure of itself in the reasoning tokens, but it comes through in the end.&lt;/p&gt; &lt;p&gt;Anyone know what optimal settings are (temp, etc.)? I haven't found an official guide from Kimi or anyone else anywhere.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Thrumpwart"&gt; /u/Thrumpwart &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lghu05/kimi_dev_72b_is_phenomenal/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lghu05/kimi_dev_72b_is_phenomenal/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lghu05/kimi_dev_72b_is_phenomenal/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T23:08:09+00:00</published>
  </entry>
  <entry>
    <id>t3_1lg9s5q</id>
    <title>OpenBuddy R1 0528 Distil into Qwen 32B</title>
    <updated>2025-06-20T17:26:07+00:00</updated>
    <author>
      <name>/u/-dysangel-</name>
      <uri>https://old.reddit.com/user/-dysangel-</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg9s5q/openbuddy_r1_0528_distil_into_qwen_32b/"&gt; &lt;img alt="OpenBuddy R1 0528 Distil into Qwen 32B" src="https://preview.redd.it/lpxeubca848f1.gif?width=320&amp;amp;crop=smart&amp;amp;s=0c797e5af53cfbc1f305db8ab83a70ad2b8308da" title="OpenBuddy R1 0528 Distil into Qwen 32B" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I'm so impressed with this model for the size. o1 was the first model I found that could one shot tetris with AI, and even other frontier models can still struggle to do it well. And now a 32B model just managed it!&lt;/p&gt; &lt;p&gt;There was one bug - only one line would be cleared at a time. It fixed this easily when I pointed it out.&lt;/p&gt; &lt;p&gt;I doubt it would one shot it every time, but this model is definitely a step up from standard Qwen 32B, which was already pretty good.&lt;/p&gt; &lt;p&gt;&lt;a href="https://huggingface.co/OpenBuddy/OpenBuddy-R1-0528-Distill-Qwen3-32B-Preview0-QAT"&gt;https://huggingface.co/OpenBuddy/OpenBuddy-R1-0528-Distill-Qwen3-32B-Preview0-QAT&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/-dysangel-"&gt; /u/-dysangel- &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/lpxeubca848f1.gif"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg9s5q/openbuddy_r1_0528_distil_into_qwen_32b/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lg9s5q/openbuddy_r1_0528_distil_into_qwen_32b/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T17:26:07+00:00</published>
  </entry>
  <entry>
    <id>t3_1lg71aq</id>
    <title>Study: Meta AI model can reproduce almost half of Harry Potter book - Ars Technica</title>
    <updated>2025-06-20T15:35:34+00:00</updated>
    <author>
      <name>/u/mylittlethrowaway300</name>
      <uri>https://old.reddit.com/user/mylittlethrowaway300</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg71aq/study_meta_ai_model_can_reproduce_almost_half_of/"&gt; &lt;img alt="Study: Meta AI model can reproduce almost half of Harry Potter book - Ars Technica" src="https://external-preview.redd.it/LATs33JDlBoRUx0tiKg7DMdY6oXVXFPIYU36DtiY4tQ.jpeg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=98b804adca292cc34f817396897e2d3bdcafc87a" title="Study: Meta AI model can reproduce almost half of Harry Potter book - Ars Technica" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I thought this was a really well-written article. &lt;/p&gt; &lt;p&gt;I had a thought: do you guys think smaller LLMs will have fewer copyright issues than larger ones? If I train a huge model on text and tell it that &amp;quot;Romeo and Juliet&amp;quot; is a &amp;quot;tragic&amp;quot; story, and also that &amp;quot;Rabbit, Run&amp;quot; by Updike is also a tragic story, the larger LLM training is more likely to retain entire passages. It has the neurons of the NN (the model weights) to store information as rote memorization. &lt;/p&gt; &lt;p&gt;But, if I train a significantly smaller model, there's a higher chance that the training will manage to &amp;quot;extract&amp;quot; the components of each story that are tragic, but not retain the entire text verbatim.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/mylittlethrowaway300"&gt; /u/mylittlethrowaway300 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://arstechnica.com/features/2025/06/study-metas-llama-3-1-can-recall-42-percent-of-the-first-harry-potter-book/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg71aq/study_meta_ai_model_can_reproduce_almost_half_of/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lg71aq/study_meta_ai_model_can_reproduce_almost_half_of/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T15:35:34+00:00</published>
  </entry>
  <entry>
    <id>t3_1lgnri0</id>
    <title>What are some AI tools (free or paid) that genuinely helped you get more done — especially the underrated ones not many talk about?</title>
    <updated>2025-06-21T04:17:18+00:00</updated>
    <author>
      <name>/u/Melted_gun</name>
      <uri>https://old.reddit.com/user/Melted_gun</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I'm not looking for the obvious ones like ChatGPT or Midjourney — more curious about those lesser-known tools that actually made a difference in your workflow, mindset, or daily routine.&lt;/p&gt; &lt;p&gt;Could be anything — writing, coding, research, time-blocking, design, personal journaling, habit tracking, whatever.&lt;/p&gt; &lt;p&gt;Just trying to find tools that might not be in my radar but could quietly improve things.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Melted_gun"&gt; /u/Melted_gun &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgnri0/what_are_some_ai_tools_free_or_paid_that/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgnri0/what_are_some_ai_tools_free_or_paid_that/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lgnri0/what_are_some_ai_tools_free_or_paid_that/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-21T04:17:18+00:00</published>
  </entry>
  <entry>
    <id>t3_1lgcbyh</id>
    <title>Performance comparison on gemma-3-27b-it-Q4_K_M, on 5090 vs 4090 vs 3090 vs A6000, tuned for performance. Both compute and bandwidth bound.</title>
    <updated>2025-06-20T19:09:42+00:00</updated>
    <author>
      <name>/u/panchovix</name>
      <uri>https://old.reddit.com/user/panchovix</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgcbyh/performance_comparison_on_gemma327bitq4_k_m_on/"&gt; &lt;img alt="Performance comparison on gemma-3-27b-it-Q4_K_M, on 5090 vs 4090 vs 3090 vs A6000, tuned for performance. Both compute and bandwidth bound." src="https://a.thumbs.redditmedia.com/smxOsICItFcgpgZ6jwpSvygFZFitUy4PBiwrObgw-D4.jpg" title="Performance comparison on gemma-3-27b-it-Q4_K_M, on 5090 vs 4090 vs 3090 vs A6000, tuned for performance. Both compute and bandwidth bound." /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi there guys. I'm reposting as the old post got removed by some reason.&lt;/p&gt; &lt;p&gt;Now it is time to compare LLMs, where these GPUs shine the most.&lt;/p&gt; &lt;p&gt;hardware-software config:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;AMD Ryzen 7 7800X3D&lt;/li&gt; &lt;li&gt;192GB RAM DDR5 6000Mhz CL30&lt;/li&gt; &lt;li&gt;MSI Carbon X670E&lt;/li&gt; &lt;li&gt;Fedora 41 (Linux), Kernel 6.19&lt;/li&gt; &lt;li&gt;Torch 2.7.1+cu128&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Each card was tuned to try to get the highest clock possible, highest VRAM bandwidth and less power consumption.&lt;/p&gt; &lt;p&gt;The benchmark was run on ikllamacpp, as&lt;/p&gt; &lt;p&gt;&lt;code&gt;./llama-sweep-bench -m '/GUFs/gemma-3-27b-it-Q4_K_M.gguf' -ngl 999 -c 8192 -fa -ub 2048&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The tuning was made on each card, and none was power limited (basically all with the slider maxed for PL)&lt;/p&gt; &lt;ul&gt; &lt;li&gt;RTX 5090: &lt;ul&gt; &lt;li&gt;Max clock: 3010 Mhz&lt;/li&gt; &lt;li&gt;Clock offset: 1000&lt;/li&gt; &lt;li&gt;Basically an undervolt plus overclock near the 0.9V point (Linux doesn't let you see voltages)&lt;/li&gt; &lt;li&gt;VRAM overclock: +3000Mhz (34 Gbps effective, so about 2.1 TB/s bandwidth)&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;RTX 4090: &lt;ul&gt; &lt;li&gt;Max clock: 2865 Mhz&lt;/li&gt; &lt;li&gt;Clock offset: 150&lt;/li&gt; &lt;li&gt;This is an undervolt+OC about the 0.91V point.&lt;/li&gt; &lt;li&gt;VRAM Overclock: +1650Mhz (22.65 Gbps effective, so about 1.15 TB/s bandwidth)&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;RTX 3090: &lt;ul&gt; &lt;li&gt;Max clock: 1905 Mhz&lt;/li&gt; &lt;li&gt;Clock offset: 180&lt;/li&gt; &lt;li&gt;This is confirmed, from windows, an UV + OC of 1905Mhz at 0.9V.&lt;/li&gt; &lt;li&gt;VRAM Overclock: +1000Mhz (so about 1.08 TB/s bandwidth)&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;li&gt;RTX A6000: &lt;ul&gt; &lt;li&gt;Max clock: 1740 Mhz&lt;/li&gt; &lt;li&gt;Clock offset: 150&lt;/li&gt; &lt;li&gt;This is an UV + OC of about 0.8V&lt;/li&gt; &lt;li&gt;VRAM Overclock: +1000Mhz (about 870 GB/s bandwidth)&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For reference: PP (pre processing) is mostly compute bound, and TG (text generation) is bandwidth bound.&lt;/p&gt; &lt;p&gt;I have posted the raw performance metrics on pastebin, as it is a bit hard to make it readable here on reddit, on &lt;a href="https://pastebin.com/g3vjU6jY"&gt;here.&lt;/a&gt;&lt;/p&gt; &lt;h1&gt;Raw Performance Summary (N_KV = 0)&lt;/h1&gt; &lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th align="left"&gt;GPU&lt;/th&gt; &lt;th align="left"&gt;PP Speed (t/s)&lt;/th&gt; &lt;th align="left"&gt;TG Speed (t/s)&lt;/th&gt; &lt;th align="left"&gt;Power (W)&lt;/th&gt; &lt;th align="left"&gt;PP t/s/W&lt;/th&gt; &lt;th align="left"&gt;TG t/s/W&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;td align="left"&gt;RTX 5090&lt;/td&gt; &lt;td align="left"&gt;4,641.54&lt;/td&gt; &lt;td align="left"&gt;76.78&lt;/td&gt; &lt;td align="left"&gt;425&lt;/td&gt; &lt;td align="left"&gt;10.92&lt;/td&gt; &lt;td align="left"&gt;0.181&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;RTX 4090&lt;/td&gt; &lt;td align="left"&gt;3,625.95&lt;/td&gt; &lt;td align="left"&gt;54.38&lt;/td&gt; &lt;td align="left"&gt;375&lt;/td&gt; &lt;td align="left"&gt;9.67&lt;/td&gt; &lt;td align="left"&gt;0.145&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;RTX 3090&lt;/td&gt; &lt;td align="left"&gt;1,538.49&lt;/td&gt; &lt;td align="left"&gt;44.78&lt;/td&gt; &lt;td align="left"&gt;360&lt;/td&gt; &lt;td align="left"&gt;4.27&lt;/td&gt; &lt;td align="left"&gt;0.124&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;RTX A6000&lt;/td&gt; &lt;td align="left"&gt;1,578.69&lt;/td&gt; &lt;td align="left"&gt;38.60&lt;/td&gt; &lt;td align="left"&gt;280&lt;/td&gt; &lt;td align="left"&gt;5.64&lt;/td&gt; &lt;td align="left"&gt;0.138&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;h1&gt;Relative Performance (vs RTX 3090 baseline)&lt;/h1&gt; &lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th align="left"&gt;GPU&lt;/th&gt; &lt;th align="left"&gt;PP Speed&lt;/th&gt; &lt;th align="left"&gt;TG Speed&lt;/th&gt; &lt;th align="left"&gt;PP Efficiency&lt;/th&gt; &lt;th align="left"&gt;TG Efficiency&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;td align="left"&gt;RTX 5090&lt;/td&gt; &lt;td align="left"&gt;3.02x&lt;/td&gt; &lt;td align="left"&gt;1.71x&lt;/td&gt; &lt;td align="left"&gt;2.56x&lt;/td&gt; &lt;td align="left"&gt;1.46x&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;RTX 4090&lt;/td&gt; &lt;td align="left"&gt;2.36x&lt;/td&gt; &lt;td align="left"&gt;1.21x&lt;/td&gt; &lt;td align="left"&gt;2.26x&lt;/td&gt; &lt;td align="left"&gt;1.17x&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;RTX 3090&lt;/td&gt; &lt;td align="left"&gt;1.00x&lt;/td&gt; &lt;td align="left"&gt;1.00x&lt;/td&gt; &lt;td align="left"&gt;1.00x&lt;/td&gt; &lt;td align="left"&gt;1.00x&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;RTX A6000&lt;/td&gt; &lt;td align="left"&gt;1.03x&lt;/td&gt; &lt;td align="left"&gt;0.86x&lt;/td&gt; &lt;td align="left"&gt;1.32x&lt;/td&gt; &lt;td align="left"&gt;1.11x&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;h1&gt;Performance Degradation with Context (N_KV)&lt;/h1&gt; &lt;table&gt;&lt;thead&gt; &lt;tr&gt; &lt;th align="left"&gt;GPU&lt;/th&gt; &lt;th align="left"&gt;PP Drop (0→6144)&lt;/th&gt; &lt;th align="left"&gt;TG Drop (0→6144)&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt;&lt;tbody&gt; &lt;tr&gt; &lt;td align="left"&gt;RTX 5090&lt;/td&gt; &lt;td align="left"&gt;-15.7%&lt;/td&gt; &lt;td align="left"&gt;-13.5%&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;RTX 4090&lt;/td&gt; &lt;td align="left"&gt;-16.3%&lt;/td&gt; &lt;td align="left"&gt;-14.9%&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;RTX 3090&lt;/td&gt; &lt;td align="left"&gt;-12.7%&lt;/td&gt; &lt;td align="left"&gt;-14.3%&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align="left"&gt;RTX A6000&lt;/td&gt; &lt;td align="left"&gt;-14.1%&lt;/td&gt; &lt;td align="left"&gt;-14.7%&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; &lt;p&gt;And some images!&lt;/p&gt; &lt;p&gt;&lt;a href="https://preview.redd.it/0immnis9s48f1.png?width=2560&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=589766f32331a2f5eaa43f0612bcde80352e432a"&gt;https://preview.redd.it/0immnis9s48f1.png?width=2560&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=589766f32331a2f5eaa43f0612bcde80352e432a&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://preview.redd.it/nzrpmf7as48f1.png?width=1200&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=08fa432df4dbb6f5358a8a3eb3e11e71014c1949"&gt;https://preview.redd.it/nzrpmf7as48f1.png?width=1200&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=08fa432df4dbb6f5358a8a3eb3e11e71014c1949&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://preview.redd.it/t1qpg2kny48f1.png?width=2560&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=ad8e1a5d0ffa75069f85b52e003f01e57df1b0d6"&gt;https://preview.redd.it/t1qpg2kny48f1.png?width=2560&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=ad8e1a5d0ffa75069f85b52e003f01e57df1b0d6&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/panchovix"&gt; /u/panchovix &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgcbyh/performance_comparison_on_gemma327bitq4_k_m_on/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgcbyh/performance_comparison_on_gemma327bitq4_k_m_on/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lgcbyh/performance_comparison_on_gemma327bitq4_k_m_on/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T19:09:42+00:00</published>
  </entry>
  <entry>
    <id>t3_1lg80cq</id>
    <title>New Mistral Small 3.2</title>
    <updated>2025-06-20T16:14:11+00:00</updated>
    <author>
      <name>/u/ApprehensiveAd3629</name>
      <uri>https://old.reddit.com/user/ApprehensiveAd3629</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;open weights: &lt;a href="https://huggingface.co/mistralai/Mistral-Small-3.2-24B-Instruct-2506"&gt;https://huggingface.co/mistralai/Mistral-Small-3.2-24B-Instruct-2506&lt;/a&gt;&lt;/p&gt; &lt;p&gt;source: &lt;a href="https://x.com/MistralAI/status/1936093325116781016/photo/1"&gt;https://x.com/MistralAI/status/1936093325116781016/photo/1&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/ApprehensiveAd3629"&gt; /u/ApprehensiveAd3629 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg80cq/new_mistral_small_32/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg80cq/new_mistral_small_32/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lg80cq/new_mistral_small_32/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T16:14:11+00:00</published>
  </entry>
  <entry>
    <id>t3_1lgkhdk</id>
    <title>A100 80GB can't serve 10 concurrent users - what am I doing wrong?</title>
    <updated>2025-06-21T01:18:55+00:00</updated>
    <author>
      <name>/u/Creative_Yoghurt25</name>
      <uri>https://old.reddit.com/user/Creative_Yoghurt25</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Running Qwen2.5-14B-AWQ on A100 80GB for voice calls.&lt;/p&gt; &lt;p&gt;People say RTX 4090 serves 10+ users fine. My A100 with 80GB VRAM can't even handle 10 concurrent requests without terrible TTFT (30+ seconds).&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Current vLLM config:&lt;/strong&gt; &lt;code&gt;yaml --model Qwen/Qwen2.5-14B-Instruct-AWQ --quantization awq_marlin --gpu-memory-utilization 0.95 --max-model-len 12288 --max-num-batched-tokens 4096 --max-num-seqs 64 --enable-chunked-prefill --enable-prefix-caching --block-size 32 --preemption-mode recompute --enforce-eager &lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Configs I've tried:&lt;/strong&gt; - &lt;code&gt;max-num-seqs&lt;/code&gt;: 4, 32, 64, 256, 1024 - &lt;code&gt;max-num-batched-tokens&lt;/code&gt;: 2048, 4096, 8192, 16384, 32768 - &lt;code&gt;gpu-memory-utilization&lt;/code&gt;: 0.7, 0.85, 0.9, 0.95 - &lt;code&gt;max-model-len&lt;/code&gt;: 2048 (too small), 4096, 8192, 12288 - Removed limits entirely - still terrible&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Context:&lt;/strong&gt; Input is ~6K tokens (big system prompt + conversation history). Output is only ~100 tokens. User messages are small but system prompt is large.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;GuideLLM benchmark results:&lt;/strong&gt; - 1 user: 36ms TTFT ✅&lt;br /&gt; - 25 req/s target: Only got 5.34 req/s actual, 30+ second TTFT - Throughput test: 3.4 req/s max, 17+ second TTFT - 10+ concurrent: 30+ second TTFT ❌&lt;/p&gt; &lt;p&gt;Also considering Triton but haven't tried yet.&lt;/p&gt; &lt;p&gt;Need to maintain &amp;lt;500ms TTFT for at least 30 concurrent users. What vLLM config should I use? Is 14B just too big for this workload?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Creative_Yoghurt25"&gt; /u/Creative_Yoghurt25 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgkhdk/a100_80gb_cant_serve_10_concurrent_users_what_am/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgkhdk/a100_80gb_cant_serve_10_concurrent_users_what_am/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lgkhdk/a100_80gb_cant_serve_10_concurrent_users_what_am/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-21T01:18:55+00:00</published>
  </entry>
  <entry>
    <id>t3_1lghrf9</id>
    <title>If your tools and parameters aren’t too complex, even Qwen1.5 0.5B can handle tool calling with a simple DSL and finetuning.</title>
    <updated>2025-06-20T23:04:41+00:00</updated>
    <author>
      <name>/u/umtksa</name>
      <uri>https://old.reddit.com/user/umtksa</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I designed a super minimal syntax like:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;TOOL: param1, param2, param3 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then fine-tuned Qwen 1.5 0.5B for just &lt;strong&gt;5 epochs&lt;/strong&gt;, and now it can reliably call &lt;strong&gt;all 11 tools&lt;/strong&gt; in my dataset without any issues.&lt;/p&gt; &lt;p&gt;I'm working in Turkish, and before this, I could only get accurate tool calls using much larger models like &lt;strong&gt;Gemma3:12B&lt;/strong&gt;. But this little model now handles it surprisingly well.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; – If your tool names and parameters are relatively simple like mine, just invent a small DSL and fine-tune a base model. Even &lt;strong&gt;Google Colab’s free tier&lt;/strong&gt; is enough.&lt;/p&gt; &lt;p&gt;here is my own dataset that I use to fine tune qwen1.5 &lt;a href="https://huggingface.co/datasets/umtksa/tools"&gt;https://huggingface.co/datasets/umtksa/tools&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/umtksa"&gt; /u/umtksa &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lghrf9/if_your_tools_and_parameters_arent_too_complex/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lghrf9/if_your_tools_and_parameters_arent_too_complex/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lghrf9/if_your_tools_and_parameters_arent_too_complex/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T23:04:41+00:00</published>
  </entry>
  <entry>
    <id>t3_1lg7vuc</id>
    <title>mistralai/Mistral-Small-3.2-24B-Instruct-2506 · Hugging Face</title>
    <updated>2025-06-20T16:09:13+00:00</updated>
    <author>
      <name>/u/Dark_Fire_12</name>
      <uri>https://old.reddit.com/user/Dark_Fire_12</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg7vuc/mistralaimistralsmall3224binstruct2506_hugging/"&gt; &lt;img alt="mistralai/Mistral-Small-3.2-24B-Instruct-2506 · Hugging Face" src="https://external-preview.redd.it/3DBqKqgOLKDMFbcrOD5Qa-3M1IIegLfhMX6TTbsgXeU.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=7d6eecbfa2b523b92f82faf94cb6ab334696d320" title="mistralai/Mistral-Small-3.2-24B-Instruct-2506 · Hugging Face" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Dark_Fire_12"&gt; /u/Dark_Fire_12 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://huggingface.co/mistralai/Mistral-Small-3.2-24B-Instruct-2506"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lg7vuc/mistralaimistralsmall3224binstruct2506_hugging/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lg7vuc/mistralaimistralsmall3224binstruct2506_hugging/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T16:09:13+00:00</published>
  </entry>
  <entry>
    <id>t3_1lgg7a1</id>
    <title>Google releases MagentaRT for real time music generation</title>
    <updated>2025-06-20T21:54:20+00:00</updated>
    <author>
      <name>/u/hackerllama</name>
      <uri>https://old.reddit.com/user/hackerllama</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi! Omar from the Gemma team here, to talk about MagentaRT, our new music generation model. It's real-time, with a permissive license, and just has 800 million parameters.&lt;/p&gt; &lt;p&gt;You can find a video demo right here &lt;a href="https://www.youtube.com/watch?v=Ae1Kz2zmh9M"&gt;https://www.youtube.com/watch?v=Ae1Kz2zmh9M&lt;/a&gt;&lt;/p&gt; &lt;p&gt;A blog post at &lt;a href="https://magenta.withgoogle.com/magenta-realtime"&gt;https://magenta.withgoogle.com/magenta-realtime&lt;/a&gt; &lt;/p&gt; &lt;p&gt;GitHub repo &lt;a href="https://github.com/magenta/magenta-realtime"&gt;https://github.com/magenta/magenta-realtime&lt;/a&gt;&lt;/p&gt; &lt;p&gt;And our repository #1000 on Hugging Face: &lt;a href="https://huggingface.co/google/magenta-realtime"&gt;https://huggingface.co/google/magenta-realtime&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/hackerllama"&gt; /u/hackerllama &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgg7a1/google_releases_magentart_for_real_time_music/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lgg7a1/google_releases_magentart_for_real_time_music/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lgg7a1/google_releases_magentart_for_real_time_music/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-20T21:54:20+00:00</published>
  </entry>
  <entry>
    <id>t3_1lglhll</id>
    <title>Mistral's "minor update"</title>
    <updated>2025-06-21T02:12:10+00:00</updated>
    <author>
      <name>/u/_sqrkl</name>
      <uri>https://old.reddit.com/user/_sqrkl</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lglhll/mistrals_minor_update/"&gt; &lt;img alt="Mistral's &amp;quot;minor update&amp;quot;" src="https://preview.redd.it/rb70qb16v68f1.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=a7248b214307a876a51003f595eeeb9564be8245" title="Mistral's &amp;quot;minor update&amp;quot;" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;&lt;a href="https://eqbench.com/creative_writing_longform.html"&gt;https://eqbench.com/creative_writing_longform.html&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/_sqrkl"&gt; /u/_sqrkl &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/rb70qb16v68f1.png"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lglhll/mistrals_minor_update/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lglhll/mistrals_minor_update/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-06-21T02:12:10+00:00</published>
  </entry>
</feed>
