<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/r/LocalLLaMA/.rss</id>
  <title>LocalLlama</title>
  <updated>2025-07-08T13:16:32+00:00</updated>
  <link href="https://old.reddit.com/r/LocalLLaMA/" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator>
  <icon>https://www.redditstatic.com/icon.png/</icon>
  <subtitle>Subreddit to discuss Llama, the large language model created by Meta AI.</subtitle>
  <entry>
    <id>t3_1lulsx0</id>
    <title>Newbie with questions :D</title>
    <updated>2025-07-08T11:10:59+00:00</updated>
    <author>
      <name>/u/Astro2302</name>
      <uri>https://old.reddit.com/user/Astro2302</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hey there so i am new to this whole LLama local AI, of course i have used chatgpt, claude or even lovabl ai, but as this is just the Surface of Ai i just had a view questions.&lt;/p&gt; &lt;p&gt;So what is my plan?&lt;/p&gt; &lt;p&gt;I have a Cyberdeck (Little Raspberry Pi 4 build as a &amp;quot;Laptop&amp;quot;) and i want to run a local AI model on it (would be best with internet Access), it would be cool if it was like Jarvis.&lt;/p&gt; &lt;p&gt;What have i tried?&lt;/p&gt; &lt;p&gt;I have run a view diffrent models and found that tinyllama-1.1b-chat-v1.0.Q2_K.gguf works the best with how fast it runs, but it doesnt give a good awnser like it has legit no knowledge of anything. I have also tried diffrent model like phi-2-layla-v1-chatml-Q2_K.gguf which gives a better awnser but its soooo slow its not usable. If you have any idea on what could work please help :D.&lt;/p&gt; &lt;p&gt;Sorry for my bad english btw. &lt;/p&gt; &lt;p&gt;Edit: If you need anymore info just ask in comments :^D&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Astro2302"&gt; /u/Astro2302 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lulsx0/newbie_with_questions_d/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lulsx0/newbie_with_questions_d/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lulsx0/newbie_with_questions_d/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T11:10:59+00:00</published>
  </entry>
  <entry>
    <id>t3_1lts4wd</id>
    <title>Inside Google Gemma 3n: my PyTorch Profiler insights</title>
    <updated>2025-07-07T11:51:50+00:00</updated>
    <author>
      <name>/u/aospan</name>
      <uri>https://old.reddit.com/user/aospan</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lts4wd/inside_google_gemma_3n_my_pytorch_profiler/"&gt; &lt;img alt="Inside Google Gemma 3n: my PyTorch Profiler insights" src="https://external-preview.redd.it/iyG6eCUPhSylmQBjhmsazmQyUh0CUb3n-N54OyLJmm0.jpeg?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=25644e360804c2abbce6ff1e1b66b61cd330cee0" title="Inside Google Gemma 3n: my PyTorch Profiler insights" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi everyone,&lt;/p&gt; &lt;p&gt;If you’ve ever wondered what really happens inside modern vision-language models, here’s a hands-on look. I profiled the Google Gemma 3n model on an NVIDIA GPU using PyTorch Profiler, asking it to describe a &lt;a href="https://cdn-lfs.hf.co/datasets/huggingface/documentation-images/8b21ba78250f852ca5990063866b1ace6432521d0251bde7f8de783b22c99a6d?response-content-disposition=inline%3B+filename*%3DUTF-8%27%27bee.jpg%3B+filename%3D%22bee.jpg%22%3B&amp;amp;response-content-type=image%2Fjpeg&amp;amp;Expires=1751892238&amp;amp;Policy=eyJTdGF0ZW1lbnQiOlt7IkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTc1MTg5MjIzOH19LCJSZXNvdXJjZSI6Imh0dHBzOi8vY2RuLWxmcy5oZi5jby9kYXRhc2V0cy9odWdnaW5nZmFjZS9kb2N1bWVudGF0aW9uLWltYWdlcy84YjIxYmE3ODI1MGY4NTJjYTU5OTAwNjM4NjZiMWFjZTY0MzI1MjFkMDI1MWJkZTdmOGRlNzgzYjIyYzk5YTZkP3Jlc3BvbnNlLWNvbnRlbnQtZGlzcG9zaXRpb249KiZyZXNwb25zZS1jb250ZW50LXR5cGU9KiJ9XX0_&amp;amp;Signature=FWMAYJoqhsk9AHs1%7EyIoOHBmh53A16J6Xyj-vhFVXTW%7EFkL2tRptgpALUSWppQKXjCnJZsnMXtDFcZAvDm-PFgQaK3UycJD%7ElNShdj5yopPA2F5U2gT4wEvXc-AibMF5mUrzeNKxfY56CjsiFWCfKczLZKzV-kfrXZu7t60d4o5ZdY6jmkdeMHMkYmLROTFE-tmPiKqmN7jVcMIdW43xmaEvova9oA4akIqKphaQUUvvVTToqPjILfn2LLhqwH5BgnbAE5OZ9DtreQirvzS75Xhkgi8GN7LEyrX2nt7LSYtS2vv1SfeSmWca8MY0eO7KEqF71jyA5DquPofRkEEesQ__&amp;amp;Key-Pair-Id=K3RPWS32NSSJCE"&gt;bee image&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I visualized the profiling results using &lt;a href="https://ui.perfetto.dev/"&gt;https://ui.perfetto.dev/&lt;/a&gt;, as shown in the animated GIF below:&lt;/p&gt; &lt;p&gt;&lt;a href="https://i.redd.it/frlijkwkwfbf1.gif"&gt;https://i.redd.it/frlijkwkwfbf1.gif&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Along the way, I captured and analyzed the key inference phases, including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Image feature extraction&lt;/strong&gt; with MobileNetV5 (74 msec) - the trace shows the &lt;code&gt;get_image_features&lt;/code&gt; function of Gemma3n (&lt;a href="https://github.com/huggingface/transformers/blob/main/src/transformers/models/gemma3n/modular_gemma3n.py#L2253"&gt;source&lt;/a&gt;), which then calls &lt;code&gt;forward_features&lt;/code&gt; in MobileNetV5 (&lt;a href="https://github.com/huggingface/pytorch-image-models/blob/main/timm/models/mobilenetv5.py#L535"&gt;source&lt;/a&gt;).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a href="https://preview.redd.it/afzke1tdxfbf1.png?width=2880&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=899a055b776818546205514b3d9e29fe7dee38cd"&gt;https://preview.redd.it/afzke1tdxfbf1.png?width=2880&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=899a055b776818546205514b3d9e29fe7dee38cd&lt;/a&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Text decoding&lt;/strong&gt; through a stack of Gemma3nTextDecoderLayer layers (142 msec) - a series of &lt;code&gt;Gemma3nTextDecoderLayer&lt;/code&gt; (&lt;a href="https://github.com/huggingface/transformers/blob/ca7e1a3756c022bf31429c452b2f313f043f32de/src/transformers/models/gemma3n/modular_gemma3n.py#L1829"&gt;source&lt;/a&gt;) calls. &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a href="https://preview.redd.it/6hlcdthfxfbf1.png?width=2880&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=833ae582e5eb759a1eba9adbca1841deeba07195"&gt;https://preview.redd.it/6hlcdthfxfbf1.png?width=2880&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=833ae582e5eb759a1eba9adbca1841deeba07195&lt;/a&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Token generation&lt;/strong&gt; with per-token execution broken down to kernel launches and synchronizations (244 msec total for 10 tokens, ~24 msec per token) &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a href="https://preview.redd.it/xzoilykgxfbf1.png?width=2880&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=16f504610e8821d686d63aa83e255a4feb8dfd60"&gt;https://preview.redd.it/xzoilykgxfbf1.png?width=2880&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=16f504610e8821d686d63aa83e255a4feb8dfd60&lt;/a&gt;&lt;/p&gt; &lt;p&gt;I’ve shared the full code, profiling scripts, and raw trace data, so you can dive in, reproduce the results, and explore the model’s internals for yourself.&lt;/p&gt; &lt;p&gt;👉 &lt;a href="https://github.com/sbnb-io/gemma3n-profiling/"&gt;https://github.com/sbnb-io/gemma3n-profiling/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If you’re looking to better understand how these models run under the hood, this is a solid place to start. Happy to hear your thoughts or suggestions!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/aospan"&gt; /u/aospan &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lts4wd/inside_google_gemma_3n_my_pytorch_profiler/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lts4wd/inside_google_gemma_3n_my_pytorch_profiler/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lts4wd/inside_google_gemma_3n_my_pytorch_profiler/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-07T11:51:50+00:00</published>
  </entry>
  <entry>
    <id>t3_1luk04f</id>
    <title>Is there any local LLM that comes close to GPT-4 in reasoning and capabilities? Hardware suggestion?</title>
    <updated>2025-07-08T09:18:25+00:00</updated>
    <author>
      <name>/u/ExtensionAd182</name>
      <uri>https://old.reddit.com/user/ExtensionAd182</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi everyone,&lt;br /&gt; I'm looking for a &lt;strong&gt;local LLM solution&lt;/strong&gt; that gets as close as possible to &lt;strong&gt;GPT-4&lt;/strong&gt; in terms of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Deep reasoning&lt;/li&gt; &lt;li&gt;Research assistance (Deep research)&lt;/li&gt; &lt;li&gt;Document drafting&lt;/li&gt; &lt;li&gt;Coding (apps, websites, debugging, architecture)&lt;/li&gt; &lt;li&gt;Image generation and analysis (Can create image but can also understand images i send)&lt;/li&gt; &lt;li&gt;File analysis&lt;/li&gt; &lt;li&gt;Summarization&lt;/li&gt; &lt;li&gt;Strategy ideation&lt;/li&gt; &lt;li&gt;Web search integration&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Essentially, I need a &lt;strong&gt;powerful local assistant for daily professional work&lt;/strong&gt;, capable of helping in a similar way to GPT-4, including creative and technical tasks.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;My questions:&lt;/strong&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Is there &lt;strong&gt;any model (or combination of tools)&lt;/strong&gt; that realistically approaches GPT-4's quality locally?&lt;/li&gt; &lt;li&gt;If so, what's the &lt;strong&gt;minimum hardware required&lt;/strong&gt; to run it? &lt;ul&gt; &lt;li&gt;CPU?&lt;/li&gt; &lt;li&gt;GPU (amount of VRAM)?&lt;/li&gt; &lt;li&gt;RAM?&lt;/li&gt; &lt;li&gt;Or any AIO solutions / off-the-shelf builds?&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;I’m okay with slower speeds, as long as the &lt;strong&gt;capabilities and reasoning&lt;/strong&gt; are solid.&lt;/p&gt; &lt;p&gt;Thanks in advance for any insights. I really want to break free from the cloud and have a reliable, private assistant locally.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/ExtensionAd182"&gt; /u/ExtensionAd182 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1luk04f/is_there_any_local_llm_that_comes_close_to_gpt4/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1luk04f/is_there_any_local_llm_that_comes_close_to_gpt4/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1luk04f/is_there_any_local_llm_that_comes_close_to_gpt4/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T09:18:25+00:00</published>
  </entry>
  <entry>
    <id>t3_1lulbd7</id>
    <title>Which training framework is the best for fine-tuning the Qwen3 30B MoE model?</title>
    <updated>2025-07-08T10:42:41+00:00</updated>
    <author>
      <name>/u/Alone_Ad_6011</name>
      <uri>https://old.reddit.com/user/Alone_Ad_6011</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I have tried Llama Factory, MS Swift, and Unsloth for fine-tuning the Qwen3-30B-MoE model. But the training speed is much slower than the Qwen3-14B model. I heard training MoE models is faster than dense models. Would you guide me on how to train the Qwen3-30B-MoE model?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Alone_Ad_6011"&gt; /u/Alone_Ad_6011 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lulbd7/which_training_framework_is_the_best_for/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lulbd7/which_training_framework_is_the_best_for/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lulbd7/which_training_framework_is_the_best_for/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T10:42:41+00:00</published>
  </entry>
  <entry>
    <id>t3_1ltubvs</id>
    <title>Jamba 1.7 - a ai21labs Collection</title>
    <updated>2025-07-07T13:35:12+00:00</updated>
    <author>
      <name>/u/Dark_Fire_12</name>
      <uri>https://old.reddit.com/user/Dark_Fire_12</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1ltubvs/jamba_17_a_ai21labs_collection/"&gt; &lt;img alt="Jamba 1.7 - a ai21labs Collection" src="https://external-preview.redd.it/T-WGV8JGl5ddvynFCnHkV0GApDuiD0OUmPGVN858nB8.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=35b8dfb877220fc5dfb06c711e11e9b9d474f083" title="Jamba 1.7 - a ai21labs Collection" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Dark_Fire_12"&gt; /u/Dark_Fire_12 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://huggingface.co/collections/ai21labs/jamba-17-68653e9be386dc69b1f30828"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1ltubvs/jamba_17_a_ai21labs_collection/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1ltubvs/jamba_17_a_ai21labs_collection/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-07T13:35:12+00:00</published>
  </entry>
  <entry>
    <id>t3_1lueziv</id>
    <title>Mercury: Ultra-Fast Language Models Based on Diffusion</title>
    <updated>2025-07-08T03:58:24+00:00</updated>
    <author>
      <name>/u/Happy_Percentage_384</name>
      <uri>https://old.reddit.com/user/Happy_Percentage_384</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Interesting finding. SOTA throughputs for Coder LLMs, 10x speed up over frontier models.&lt;/p&gt; &lt;p&gt;Playground: &lt;a href="https://chat.inceptionlabs.ai/"&gt;https://chat.inceptionlabs.ai/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;API: &lt;a href="https://platform.inceptionlabs.ai/"&gt;https://platform.inceptionlabs.ai/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Paper says:&lt;/p&gt; &lt;p&gt;We present Mercury, a new generation of commercial-scale large language models (LLMs) based on diffusion. In this report, we detail Mercury Coder, our first set of diffusion LLMs designed for coding applications. Currently, Mercury Coder comes in two sizes: Mini and Small. These models set a new state-of-the-art on the speed-quality frontier. Based on independent evaluations conducted by Artificial Analysis, Mercury Coder Mini and Mercury Coder Small achieve state-of-the-art throughputs of 1109 tokens/sec and 737 tokens/sec, respectively, on NVIDIA H100 GPUs and outperform speed-optimized frontier models by up to 10x on average while maintaining comparable quality. We discuss additional results on a variety of code benchmarks spanning multiple languages and use-cases as well as real-world validation by developers on Copilot Arena, where the model currently ranks second on quality and is the fastest model overall. We also release a public API at &lt;a href="https://platform.inceptionlabs.ai/"&gt;this https URL&lt;/a&gt; and free playground at &lt;a href="https://chat.inceptionlabs.ai/"&gt;this https URL&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://arxiv.org/abs/2506.17298"&gt;https://arxiv.org/abs/2506.17298&lt;/a&gt;&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Happy_Percentage_384"&gt; /u/Happy_Percentage_384 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lueziv/mercury_ultrafast_language_models_based_on/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lueziv/mercury_ultrafast_language_models_based_on/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lueziv/mercury_ultrafast_language_models_based_on/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T03:58:24+00:00</published>
  </entry>
  <entry>
    <id>t3_1lubdcg</id>
    <title>So, does anyone have a good workflow to replace google search yet?</title>
    <updated>2025-07-08T00:58:08+00:00</updated>
    <author>
      <name>/u/DepthHour1669</name>
      <uri>https://old.reddit.com/user/DepthHour1669</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;As everyone knows, google search has been getting worse the past few years. ChatGPT with web search enabled has become a big tool that is replacing Google for me. &lt;/p&gt; &lt;p&gt;Here are some example queries: &lt;/p&gt; &lt;p&gt;&lt;a href="https://chatgpt.com/share/686c6b7d-099c-8012-915b-71e2e2e67a06"&gt;&amp;quot;List the median, 25th/75th percentile MCAT scores for medical schools in California in a table. Sort by rank.&amp;quot;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://chatgpt.com/share/686c6bff-4594-8012-a0ea-ac5091cc621d"&gt;&amp;quot;What has happened in the war between Israel and Iran in the past week?&amp;quot;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;ChatGPT's responses are pretty good. It's a lot easier than googling and compiling the information yourself. The responses are &lt;strong&gt;even better- basically perfect- if you use o3 or o4-mini&lt;/strong&gt;, but I don't have a Plus account and prefer to use the API. Using o4-mini with my brother's account literally saves me so much time google searching already.&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;So... can we replicate this locally? Maybe use Qwen 32b with a good system prompt, and have Serper to do google search API, and then some way of loading the pages in the results into context? Has anyone tried to build such a system that works similarly smoothly as how ChatGPT the product works?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/DepthHour1669"&gt; /u/DepthHour1669 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lubdcg/so_does_anyone_have_a_good_workflow_to_replace/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lubdcg/so_does_anyone_have_a_good_workflow_to_replace/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lubdcg/so_does_anyone_have_a_good_workflow_to_replace/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T00:58:08+00:00</published>
  </entry>
  <entry>
    <id>t3_1lujz2h</id>
    <title>Question about "./llama-server" prompt caching</title>
    <updated>2025-07-08T09:16:23+00:00</updated>
    <author>
      <name>/u/d00m_sayer</name>
      <uri>https://old.reddit.com/user/d00m_sayer</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Does &lt;code&gt;./llama-server&lt;/code&gt; support prompt caching (like &lt;code&gt;--prompt-cache&lt;/code&gt; in the CLI), and if not, what’s the correct way to persist or reuse context between chat turns to avoid recomputing the full prompt each time in API-based usage (e.g., with Open WebUI)?&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/d00m_sayer"&gt; /u/d00m_sayer &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lujz2h/question_about_llamaserver_prompt_caching/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lujz2h/question_about_llamaserver_prompt_caching/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lujz2h/question_about_llamaserver_prompt_caching/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T09:16:23+00:00</published>
  </entry>
  <entry>
    <id>t3_1lufhso</id>
    <title>Let's train a local open-source coding agent model and kick BigAI's ass!</title>
    <updated>2025-07-08T04:26:01+00:00</updated>
    <author>
      <name>/u/InstrumentalAsylum</name>
      <uri>https://old.reddit.com/user/InstrumentalAsylum</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Who's down? &lt;a href="https://www.reddit.com/r/RooCode/comments/1lufep2/lets_train_a_local_opensource_model_to_use_roo/"&gt;https://www.reddit.com/r/RooCode/comments/1lufep2/lets_train_a_local_opensource_model_to_use_roo/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;FYI Roo Code is an open source VS Code extension, forked from Cline, which is comparable to Github Copilot.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/InstrumentalAsylum"&gt; /u/InstrumentalAsylum &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lufhso/lets_train_a_local_opensource_coding_agent_model/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lufhso/lets_train_a_local_opensource_coding_agent_model/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lufhso/lets_train_a_local_opensource_coding_agent_model/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T04:26:01+00:00</published>
  </entry>
  <entry>
    <id>t3_1lubunz</id>
    <title>Chrome now includes a built-in local LLM, I built a wrapper to make the API easier to use</title>
    <updated>2025-07-08T01:20:50+00:00</updated>
    <author>
      <name>/u/kuaythrone</name>
      <uri>https://old.reddit.com/user/kuaythrone</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lubunz/chrome_now_includes_a_builtin_local_llm_i_built_a/"&gt; &lt;img alt="Chrome now includes a built-in local LLM, I built a wrapper to make the API easier to use" src="https://external-preview.redd.it/sp3umckXVxqL0xC9QHfq1Qvl1z_m3teqOXRXzjGhY2E.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=f78fcdb19a156bc527af711a1b2b011dea452f04" title="Chrome now includes a built-in local LLM, I built a wrapper to make the API easier to use" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Chrome now includes a native on-device LLM (Gemini Nano) starting in version 138 for extensions. I've been building with it for a while and excited that its finally made it into the latest version of Chrome. It’s powerful, but the official Prompt API can be a bit awkward to use:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Enforces sessions even for basic usage&lt;/li&gt; &lt;li&gt;Requires user-triggered downloads&lt;/li&gt; &lt;li&gt;Lacks type safety or structured error handling&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So I open-sourced a small TypeScript wrapper I originally built for other projects to smooth over some rough edges:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;github: &lt;a href="https://github.com/kstonekuan/simple-chromium-ai"&gt;https://github.com/kstonekuan/simple-chromium-ai&lt;/a&gt;&lt;/li&gt; &lt;li&gt;npm: &lt;a href="https://www.npmjs.com/package/simple-chromium-ai"&gt;https://www.npmjs.com/package/simple-chromium-ai&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Features:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Stateless prompt() method inspired by Anthropic's SDK&lt;/li&gt; &lt;li&gt;Built-in error handling and Result based .Safe.* variants&lt;/li&gt; &lt;li&gt;Token usage checks&lt;/li&gt; &lt;li&gt;Simple initialization&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;It's intentionally minimal, ideal for hacking, prototypes, or playing with the new built-in AI without dealing with the full complexity.&lt;/p&gt; &lt;p&gt;For full control (e.g., streaming, memory management), use the official API: &lt;a href="https://developer.chrome.com/docs/ai/prompt-api"&gt;https://developer.chrome.com/docs/ai/prompt-api&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Would love to hear feedback or see what people make with it!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/kuaythrone"&gt; /u/kuaythrone &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://github.com/kstonekuan/simple-chromium-ai"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lubunz/chrome_now_includes_a_builtin_local_llm_i_built_a/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lubunz/chrome_now_includes_a_builtin_local_llm_i_built_a/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T01:20:50+00:00</published>
  </entry>
  <entry>
    <id>t3_1lukahl</id>
    <title>Anyone compared Qwen3 embeddings results with/without quantization ?</title>
    <updated>2025-07-08T09:37:48+00:00</updated>
    <author>
      <name>/u/LelouchZer12</name>
      <uri>https://old.reddit.com/user/LelouchZer12</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I am referring to those models :&lt;/p&gt; &lt;p&gt;&lt;a href="https://huggingface.co/Qwen/Qwen3-Embedding-8B-GGUF"&gt;https://huggingface.co/Qwen/Qwen3-Embedding-8B-GGUF&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The model card provides result for the non-quantized models but not for the quantized version&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/LelouchZer12"&gt; /u/LelouchZer12 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lukahl/anyone_compared_qwen3_embeddings_results/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lukahl/anyone_compared_qwen3_embeddings_results/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lukahl/anyone_compared_qwen3_embeddings_results/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T09:37:48+00:00</published>
  </entry>
  <entry>
    <id>t3_1lu7lsi</id>
    <title>UI/UX Benchmark Update and Response: More Models, Updating Ranking, Open Data Soon</title>
    <updated>2025-07-07T22:09:06+00:00</updated>
    <author>
      <name>/u/adviceguru25</name>
      <uri>https://old.reddit.com/user/adviceguru25</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lu7lsi/uiux_benchmark_update_and_response_more_models/"&gt; &lt;img alt="UI/UX Benchmark Update and Response: More Models, Updating Ranking, Open Data Soon" src="https://b.thumbs.redditmedia.com/VkhU8Mt9acaQeJtSLndzIlRsVXJlfJ84thb8pJB8_6o.jpg" title="UI/UX Benchmark Update and Response: More Models, Updating Ranking, Open Data Soon" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hi all, a few times on here I've been sharing progress on a &lt;a href="https://www.designarena.ai/"&gt;UI/UX benchmark&lt;/a&gt; that I have been working on with a small team. In particular, I made &lt;a href="https://www.reddit.com/r/LocalLLaMA/comments/1lthtbn/85k_people_voted_on_which_ai_models_create_the/"&gt;a post yesterday&lt;/a&gt; that gave us a ton of useful feedback so thank you to everyone that put in a comment and voted on our platform! I just wanted to address some concerns, provide some updates on what we are working on, and create an open discussion on how the benchmark can be improved. This post will be a bit long since I want to be as detailed as possible, but here we go:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Context:&lt;/strong&gt; We released the benchmark just a few weeks ago (3 weeks ago I think?) and mostly it started out as an internal tool among my team since we were interested in the current UI/UX capabilities of LLMs and HCI and wanted to see which models are best at designing and implementing interfaces. We really just pushed the benchmark out initially as a fun side project to see what would happen, but really didn't forsee that we would get over 10K people on our site at some point! Our motivation here is that something like UI/UX data for AI seems that it will be heavily reliant on public opinion, rather than a deterministic benchmark or private evaluation. &lt;/p&gt; &lt;p&gt;As I said, we received a lot of very helpful feedback, and as we're still in very early early stages with developing the benchmark, we're really trying to do our best to make our benchmark as transparent and useful as possible. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;More Models and Voting Inconsistency:&lt;/strong&gt; Many people have noted that many premier models are missing such as GLM-4, Qwen, Gemini 2.5-Flash, etc. We are working on adding those and hope to add those models in the next couple of days and will update you all when those are added. I realize I have been saying that more models will be added for more than a few days now haha, but honestly we are a small team with not an infinite amount of money lol, so we're just waiting to get some more credits. I hope that makes sense and thank you for your patience! &lt;/p&gt; &lt;p&gt;Another comment we got is that the number of votes received for the different models are vastly different even though voting should be recruiting models at random. There are few reasons for this: (1) we added some models earlier (notably Claude when we were first developing the benchmark) and other models later (Mistral, Llama, etc.), (2) we did deactivate some models that became deprecated or because we ran out of credits (such as Llama which we're deploying on Vertex but we will add back) and (3) for slower models like DeepSeek, we do notice churn from voters in the sense that people won't wait for those models to finish generating all the time. &lt;/p&gt; &lt;p&gt;For (1) and (2) we will address by providing exact details on when we added each model and adding back models (assuming they are not deprecated) such as Llama. For (3), we have put some thought into this over the last few weeks but honestly not sure how exactly we should tackle this issue since this is a bit of a limitation of having a public crowdsource benchmark. We did get some suggestions to perhaps have some priority for models with fewer votes, but there is a correlation between having fewer votes and slower generation times, so we don't think there is an immediate fix there but we likely incorporate some kind of priority system. That said, we would appreciate any suggestions on (3)! &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Voting Data:&lt;/strong&gt; To be clear, this is standard preference dataset that we collect when users do binary comparisons on our &lt;a href="https://www.designarena.ai/vote"&gt;voting page&lt;/a&gt;. We'll be releasing a preference dataset that can be accessed through Hugging Face and/or a REST API that will be updated periodically and that people can use to replicate the leaderboard. Note that the &lt;a href="https://www.designarena.ai/leaderboard"&gt;leaderboard page is currently being updated every hour&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;System Prompts and Model Configs:&lt;/strong&gt; We will also release these along with the preference dataset and make our current settings much more clear. You'll get full access to these configs, but for the we're asking each model (with the same sys prompt across the board) to create an interface using HTML/CSS/JS with some restrictions (to ensure sure the code is sandboxed as possible + allowing it to use specific libraries like ThreeJs for 3D viz, Tailwind, etc.). For model configs, we are setting temperature to 0.8. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Tournaments:&lt;/strong&gt; This was more of an aesthetic choice on our part to make the voting process more interesting for the user and get more comparisons for the same prompt across models. We'll also provide exact details on how these are being constructed, but the idea is that we're recruiting X number of models that are each being voted on in a group. We have had too kind of tournament structures. In the first, we would serve two models, have a user vote, and then continually have the winner go against the next served model. We decided to change this structure because we weren't able to compare losers in the bracket. For the current tournament system, we have two models A and B go against each other and then two other models C and D go against each other in round 1. Then the winners from the first round and losers from the last round go against each other. After that the loser in the winners' bracket will go against the winner in the losers' bracket to decide 2nd and 3rd place. We don't think this structure is necessarily perfect, but just more of an aesthetic choice so people could see different models at the same time in a grouping. We acknowledge that with the preference data, you could certainly structure the tournament data differently and our tournament structure shouldn't be considered as the absolute &amp;quot;correct&amp;quot; one. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Stack Ranking/Leaderboard:&lt;/strong&gt; This is where we acknowledge that there's certainly room for improvement here on how we can construct the leaderboard based on the preference data. Some of the concerns raised we did think about briefly in the past, but will certainly take more time to consider what's the best kind of ranking. Right now though, we have a ranking by win rate, and then an &amp;quot;Elo&amp;quot; score (which we're using an approximate formula based on win rate for which you can find at the bottom of the &lt;a href="https://www.designarena.ai/leaderboard"&gt;leaderboard&lt;/a&gt;). A concern raised that is relevant to what was said above is that the number of votes a model has does have an effect on the placement in the leaderboard. We will probably add some way to weight win rate / elo score by number votes, and any suggestions on what would be the best stack ranking here would be appreciated! That said, I do think it might be good to not take the leaderboard as this definitive ranking, since one could construct their own different kind of leaderboards / rankings based on how they choose to structure the preference data, but more so treat it as a general &amp;quot;tier list&amp;quot; for the models. &lt;/p&gt; &lt;p&gt;Let us know what you think and if you have any questions in the comments! &lt;/p&gt; &lt;p&gt;Please also join our &lt;a href="https://discord.gg/5AagpZd5"&gt;Discord&lt;/a&gt; for the best way to message us directly. &lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/adviceguru25"&gt; /u/adviceguru25 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://www.reddit.com/gallery/1lu7lsi"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lu7lsi/uiux_benchmark_update_and_response_more_models/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lu7lsi/uiux_benchmark_update_and_response_more_models/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-07T22:09:06+00:00</published>
  </entry>
  <entry>
    <id>t3_1ltxsqh</id>
    <title>Qwen3-8B-BitNet</title>
    <updated>2025-07-07T15:53:44+00:00</updated>
    <author>
      <name>/u/codys12</name>
      <uri>https://old.reddit.com/user/codys12</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Here is a decent Qwen3 BitNet model I trained with ~1B tokens using SYNTHETIC-1 data. BitNet Hunyuan A13B is training this week.&lt;br /&gt; &lt;a href="https://huggingface.co/codys12/Qwen3-8B-BitNet"&gt;model&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://colab.research.google.com/drive/1GT0GEyjzOQUiOI0tphvhiFDwUw-F6v7l?usp=sharing"&gt;notebook&lt;/a&gt; to try out the model&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/codys12"&gt; /u/codys12 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1ltxsqh/qwen38bbitnet/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1ltxsqh/qwen38bbitnet/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1ltxsqh/qwen38bbitnet/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-07T15:53:44+00:00</published>
  </entry>
  <entry>
    <id>t3_1lumebd</id>
    <title>Google Colab’s new Gemini Integration is legit the best here-let-me-fix-that-for-you Python coding tool I’ve found so far.</title>
    <updated>2025-07-08T11:44:12+00:00</updated>
    <author>
      <name>/u/Porespellar</name>
      <uri>https://old.reddit.com/user/Porespellar</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I’m currently a graduate student pursuing a Masters in AI. A lot of our AI &amp;amp; ML class projects for fine-tuning models and such involve creating Jupyter notebooks to run Python for training and evaluating models. &lt;/p&gt; &lt;p&gt;I had been using Anaconda and Jupyter for Python projects, but then I heard that you could get access to free GPU resources (like A100s and TPUs) to train models on, so I decided to give Colab a shot. &lt;/p&gt; &lt;p&gt;I had tried Colab briefly about a year or so ago and found it a bit clunky and didn’t think it was anything special at the time, but now with the Gemini integration it is WAY BETTER than I remember it. I can’t emphasize enough how crazy good it is now., like I like it better than VS Code with the Continue extension. To test it I asked it to help me with a multi step problem that involved training and doing EDA on a model, adjusting hyperparameters and that kind of stuff, and it was able to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;generate a plan&lt;/li&gt; &lt;li&gt;perform multi task orchestration&lt;/li&gt; &lt;li&gt;create code blocks&lt;/li&gt; &lt;li&gt;create markdown blocks&lt;/li&gt; &lt;li&gt;interact with the file system&lt;/li&gt; &lt;li&gt;reach external websites to download Kaggle datasets&lt;/li&gt; &lt;li&gt;automatically connect to a GPU resources that it needed to train a model without me even selecting one&lt;/li&gt; &lt;li&gt;Fix coding errors &lt;/li&gt; &lt;li&gt;resolve Python dependency issues automatically &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;It was all very polished and just worked how I wanted it to work.&lt;/p&gt; &lt;p&gt;So if you’re trying to build and evaluate models on a shoe string budget, or building anything in Python, I would definitely recommend trying out the much-improved Colab. It’s a great free resource for experimenting with AI and seems light years beyond what you can do with just plain Jupyter. &lt;/p&gt; &lt;p&gt;Here’s the link for it:&lt;/p&gt; &lt;p&gt;&lt;a href="https://colab.google/"&gt;https://colab.google/&lt;/a&gt;&lt;/p&gt; &lt;p&gt;I know it’s not local per se, but it can help you build, fine tune, and evaluate models so I thought it still belonged here. &lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Porespellar"&gt; /u/Porespellar &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lumebd/google_colabs_new_gemini_integration_is_legit_the/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lumebd/google_colabs_new_gemini_integration_is_legit_the/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lumebd/google_colabs_new_gemini_integration_is_legit_the/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T11:44:12+00:00</published>
  </entry>
  <entry>
    <id>t3_1lue75q</id>
    <title>Day 11/50: Building a small language from scratch: Introduction to the Attention Mechanism in Large Language Models (LLMs)</title>
    <updated>2025-07-08T03:16:51+00:00</updated>
    <author>
      <name>/u/Prashant-Lakhera</name>
      <uri>https://old.reddit.com/user/Prashant-Lakhera</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lue75q/day_1150_building_a_small_language_from_scratch/"&gt; &lt;img alt="Day 11/50: Building a small language from scratch: Introduction to the Attention Mechanism in Large Language Models (LLMs)" src="https://b.thumbs.redditmedia.com/3xrs0rEfGKpFirEZfNvII0Y7stkFc5h_AVNkVSBnMPw.jpg" title="Day 11/50: Building a small language from scratch: Introduction to the Attention Mechanism in Large Language Models (LLMs)" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;&lt;a href="https://preview.redd.it/ya6uoxmoikbf1.png?width=1024&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=69253abb996cd2754a0835f4ada4f543826578ac"&gt;https://preview.redd.it/ya6uoxmoikbf1.png?width=1024&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=69253abb996cd2754a0835f4ada4f543826578ac&lt;/a&gt;&lt;/p&gt; &lt;h1&gt;Hello everyone! &lt;/h1&gt; &lt;p&gt;Welcome back to our journey through the “Build Large Language Models from Scratch” series. So far, we’ve spent a considerable amount of time in the first stage of this journey, laying the groundwork by focusing on data preparation and sampling.&lt;/p&gt; &lt;p&gt;We’ve covered:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Tokenization&lt;/li&gt; &lt;li&gt;Byte-Pair Encoding&lt;/li&gt; &lt;li&gt;Word and Positional Embeddings&lt;/li&gt; &lt;li&gt;Model distillation&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Essentially, we’ve now established a solid foundation for the data preprocessing pipeline. It’s time to move on to something that powers the very core of today’s Large Language Models (LLMs): The Attention Mechanism.&lt;/p&gt; &lt;h1&gt;Transformers: The Car, Attention: The Engine&lt;/h1&gt; &lt;p&gt;If you think of a Transformer as a car, then attention is its engine. Without it, the whole vehicle wouldn’t move the way we want it to.&lt;/p&gt; &lt;p&gt;You’ve probably heard of ChatGPT, right? The impressive performance of modern large language models, including their ability to understand context, generate coherent text, and handle long-range dependencies, is primarily enabled by the attention mechanism. However, here’s the problem: most tutorials available online jump straight into multi-head attention, skipping over the intuition and basics.&lt;/p&gt; &lt;p&gt;So we’re going to take a different path. A deeper, gentler path.&lt;/p&gt; &lt;h1&gt;Why Do We Need Attention?&lt;/h1&gt; &lt;p&gt;Let’s motivate this with a simple example.&lt;/p&gt; &lt;p&gt;Imagine this sentence:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;em&gt;“&lt;/em&gt;The book that the professor whom the students admired wrote became a bestseller&lt;em&gt;.”&lt;/em&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;As humans, we can parse this and understand:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;“&lt;/strong&gt;book&lt;strong&gt;”&lt;/strong&gt; is the subject&lt;/li&gt; &lt;li&gt;&lt;strong&gt;“&lt;/strong&gt;became&lt;strong&gt;”&lt;/strong&gt; is the verb&lt;/li&gt; &lt;li&gt;Everything else — &lt;em&gt;“that the professor whom the students admired wrote”&lt;/em&gt; — is additional context&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;But for a model, this sentence is challenging. It contains nested clauses and long-term dependencies, meaning the model must track relationships between words that are far apart in the sequence.&lt;/p&gt; &lt;p&gt;The model needs to know:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The book is the thing that became a bestseller&lt;/li&gt; &lt;li&gt;The clauses in between provide important but secondary context&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Now imagine trying to do this with a simple model that reads one word at a time and only remembers the last few. It could easily get lost and focus too much on “professor” or “students,” losing track of the main subject, the book, and the main action, becoming.&lt;/p&gt; &lt;p&gt;This is where the attention mechanism shines.&lt;/p&gt; &lt;p&gt;It allows the model to focus on the most relevant parts of the sentence dynamically, connecting “book” with “became” while still incorporating the supporting context. This selective focus helps the model maintain a deeper understanding of the sentence’s meaning.&lt;/p&gt; &lt;p&gt;Without attention, models often struggle to preserve this context over longer spans of text, leading to confused or incoherent outputs.&lt;/p&gt; &lt;p&gt;This ability to dynamically focus on different words based on their relevance is what makes attention so powerful. Without it, models can lose track of meaning, especially in long sentences.&lt;/p&gt; &lt;h1&gt;The Four Flavors of Attention&lt;/h1&gt; &lt;p&gt;In upcoming lectures, we’ll build the full attention stack step-by-step&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;Simplified Self-Attention&lt;/strong&gt; — Our starting point. Stripped-down, crystal-clear.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Self-Attention&lt;/strong&gt; — Adds learnable weights.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Causal Attention&lt;/strong&gt; — Ensures the model only considers past tokens (not future ones).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Multi-Head Attention&lt;/strong&gt; — Multiple attention heads process input in parallel.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Many tutorials start at step 4 and expect you to know already how to swim. We’ll walk first, then run.&lt;/p&gt; &lt;h1&gt;Let’s Go Back in Time&lt;/h1&gt; &lt;p&gt;Before the advent of attention, there were Recurrent Neural Networks (RNNs). They were the dominant approach to sequence modeling, like translation.&lt;/p&gt; &lt;p&gt;Here’s how they worked:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The encoder reads the input (say, a sentence in German).&lt;/li&gt; &lt;li&gt;The encoder compresses everything into a final hidden state (a “summary” of the whole sentence).&lt;/li&gt; &lt;li&gt;The decoder uses that to generate output (say, in English).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;But here’s the problem…&lt;/p&gt; &lt;h1&gt;The RNN Bottleneck&lt;/h1&gt; &lt;p&gt;The decoder only sees one final hidden state. If the input is long, this becomes a massive problem.&lt;/p&gt; &lt;p&gt;Think of trying to summarize a whole book in one sentence, then answer questions about it. That’s what RNNs expected the model to do.&lt;/p&gt; &lt;h1&gt;Enter Attention: The 2014 Breakthrough&lt;/h1&gt; &lt;p&gt;In 2014, Bahdanau et al. proposed something revolutionary: Why not let the decoder access all the hidden states?&lt;/p&gt; &lt;p&gt;So, instead of relying on just the last hidden state, the decoder can now look back at every part of the input and decide:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Which words matter most?&lt;/li&gt; &lt;li&gt;How much “attention” should I give to each word?&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;It was like giving the model memory superpowers — and it worked wonders!&lt;/p&gt; &lt;h1&gt;Dynamic Focus: The Heart of Attention&lt;/h1&gt; &lt;p&gt;The core idea is called dynamic focus. For every word the model tries to generate, it can look back and weigh every input word differently.&lt;/p&gt; &lt;p&gt;Suppose the model is generating the word &lt;strong&gt;“&lt;/strong&gt;bestseller&lt;strong&gt;”&lt;/strong&gt;. With attention, it can do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Pay high attention to “book”, because that’s the subject that became the bestseller&lt;/li&gt; &lt;li&gt;Give moderate attention to “wrote”, since it’s the action that connects the subject and the outcome&lt;/li&gt; &lt;li&gt;Assign less attention to “professor” or “students”, which are part of supporting clauses but not central to this prediction&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This ability to assign importance selectively is what allows attention mechanisms to handle long-range dependencies so well, something older architectures like RNNs struggled with.&lt;/p&gt; &lt;p&gt;Without this focused attention, the model might focus onto irrelevant parts of the sentence or lose track of the main subject entirely.&lt;/p&gt; &lt;h1&gt;Traditional vs. Self-Attention&lt;/h1&gt; &lt;h1&gt;Traditional Attention:&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Focuses on relationships between two sequences&lt;/li&gt; &lt;li&gt;E.g., translating German to English&lt;/li&gt; &lt;li&gt;Aligning words across sequences&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;Self-Attention:&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Looks within a single sequence&lt;/li&gt; &lt;li&gt;E.g., predicting the next word in English&lt;/li&gt; &lt;li&gt;Determines which words relate to each other &lt;strong&gt;inside&lt;/strong&gt; the same sentence&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This shift is enormous, and it’s what powers GPT, BERT, and all modern LLMs.&lt;/p&gt; &lt;h1&gt;Recap: A Timeline of Attention&lt;/h1&gt; &lt;p&gt;We stand on over 40 years of hard-earned research.&lt;/p&gt; &lt;h1&gt;What’s Coming Next?&lt;/h1&gt; &lt;p&gt;In the next few blog posts, we’ll:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;Implement Simplified Self-Attention from Scratch&lt;/strong&gt; in Python&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Move to Self-Attention with trainable weights&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Introduce Causal Attention&lt;/strong&gt; for autoregressive modeling&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Build a Multi-Head Attention&lt;/strong&gt; layer-by-layer&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Why Learn Attention from Scratch?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Yes, you can use libraries such as Transformers, LangChain, or FlashAttention. However, to truly master large language models, you need to understand how the engine operates under the hood.&lt;/p&gt; &lt;p&gt;That’s the goal of this series. And I promise — it’s worth the effort.&lt;/p&gt; &lt;p&gt;Thanks for reading this far! ❤️&lt;/p&gt; &lt;p&gt;If this helped clarify the magic of attention, feel free to share it with your friends or comment your thoughts below.&lt;/p&gt; &lt;p&gt;Next stop: Simplified Self-Attention, from Theory to Code!&lt;/p&gt; &lt;p&gt;Stay tuned!&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Prashant-Lakhera"&gt; /u/Prashant-Lakhera &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lue75q/day_1150_building_a_small_language_from_scratch/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lue75q/day_1150_building_a_small_language_from_scratch/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lue75q/day_1150_building_a_small_language_from_scratch/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T03:16:51+00:00</published>
  </entry>
  <entry>
    <id>t3_1luiigi</id>
    <title>[Tool Release] Finetune &amp; Quantize 1–3B LLMs on 8GB RAM using LoFT CLI (TinyLlama + QLoRA + llama.cpp)</title>
    <updated>2025-07-08T07:36:20+00:00</updated>
    <author>
      <name>/u/diptanshu1991</name>
      <uri>https://old.reddit.com/user/diptanshu1991</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Hey folks — I’ve been working on a CLI tool called &lt;strong&gt;LoFT (Low-RAM Finetuning Toolkit)&lt;/strong&gt;, and I finally have a working release.&lt;/p&gt; &lt;h1&gt;🔧 What it does:&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Finetunes open-source LLMs (1–3B) like &lt;strong&gt;TinyLlama&lt;/strong&gt; using &lt;strong&gt;QLoRA&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;Runs entirely on &lt;strong&gt;CPU (MacBook Air 8GB RAM tested)&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;Quantizes to &lt;strong&gt;GGUF&lt;/strong&gt; format&lt;/li&gt; &lt;li&gt;Runs local inference via &lt;strong&gt;llama.cpp&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;All through a clean CLI (&lt;code&gt;finetune&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;quantize&lt;/code&gt;, &lt;code&gt;chat&lt;/code&gt;)&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;💻 Tech Stack:&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;transformers&lt;/code&gt;, &lt;code&gt;peft&lt;/code&gt;, &lt;code&gt;bitsandbytes&lt;/code&gt;, &lt;code&gt;datasets&lt;/code&gt;, &lt;code&gt;llama.cpp&lt;/code&gt;&lt;/li&gt; &lt;li&gt;CLI-based interface built for reproducibility and minimal setup&lt;/li&gt; &lt;/ul&gt; &lt;h1&gt;🧠 Why I built this:&lt;/h1&gt; &lt;p&gt;I wanted to see if it’s feasible to do &lt;strong&gt;end-to-end finetuning and deployment&lt;/strong&gt; of LLMs &lt;strong&gt;without a GPU or cloud setup&lt;/strong&gt; — for indie hackers, researchers, or hobbyists working on local setups.&lt;/p&gt; &lt;p&gt;And surprisingly, it works.&lt;/p&gt; &lt;h1&gt;🛠️ Coming Soon:&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;GitHub repo (final touches being made)&lt;/li&gt; &lt;li&gt;Full walkthrough + demo&lt;/li&gt; &lt;li&gt;Support for multi-turn finetuning and inference&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Would love to hear:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Any feedback from folks doing low-resource model work&lt;/li&gt; &lt;li&gt;Suggestions for models or datasets to support next&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Happy to tag you once the repo is up.&lt;/p&gt; &lt;p&gt;Cheers,&lt;br /&gt; Diptanshu&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/diptanshu1991"&gt; /u/diptanshu1991 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1luiigi/tool_release_finetune_quantize_13b_llms_on_8gb/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1luiigi/tool_release_finetune_quantize_13b_llms_on_8gb/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1luiigi/tool_release_finetune_quantize_13b_llms_on_8gb/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T07:36:20+00:00</published>
  </entry>
  <entry>
    <id>t3_1lue5xt</id>
    <title>Qwen3-235B-Q2 running locally on my 64GB (DDR4) and 32GB VRAM machine</title>
    <updated>2025-07-08T03:15:11+00:00</updated>
    <author>
      <name>/u/EmPips</name>
      <uri>https://old.reddit.com/user/EmPips</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Sharing some experiences here. Mostly vibes, but maybe someone will find this helpful:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;CPU:&lt;/strong&gt; Ryzen 9 3950x (16c/32t)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;GPU(s):&lt;/strong&gt; two Rx 6800's (2x16GB at ~520GB/s for 32GB total)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;RAM:&lt;/strong&gt; 64GB 2700mhz DDR4 in dual channel &lt;/p&gt; &lt;p&gt;&lt;strong&gt;OS:&lt;/strong&gt; Ubuntu 24.04&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Inference Software:&lt;/strong&gt; Llama-CPP (llama-server specifically) built to use ROCm&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Weights:&lt;/strong&gt; Qwen3-235b-a22b Q2 (Unsloth Quant), ~85GB. ~32GB into VRAM, 53GB to memory before context &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Performance (Speed):&lt;/strong&gt; Inference speed was anywhere from 4 to 6 tokens per second with 8K max context (have not tested much higher). I offload 34 layers to GPU. I tried offloading experts to CPU (which allowed me to set this to ~75 layers) but did not experience a speed boost of any sort.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Speculative Decoding:&lt;/strong&gt; I tried using a few quants of Qwen3 0.6b, 1.7b, and 4b .. none had good accuracy and all slowed things down.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Intelligence:&lt;/strong&gt; I'm convinced this is the absolute best model that this machine can run, &lt;em&gt;but am diving deeper to determine if that's worth the speed penalty to my use cases&lt;/em&gt;. It beats the previous champs (Qwen3-32B larger quants, Llama 3.3 70B Q5) for sure, even at Western history/trivia (Llama usually has an unfair advantage over Qwen here in my tests), but not tremendously so. There is no doubt in my mind that this is the most intelligent LLM I can run shut off from the open web with my current hardware (before inviting my SSD and some insane wait-times into the equation..). The intelligence gain doesn't appear to be night-and-day, but the speed loss absolutely is.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Vulkan&lt;/strong&gt; Vulkan briefly uses more VRAM on startup it seems. By the time I can get it to start using Vulkan (without crashing) I've sent so many layers back to CPU that it'd be impossible for it to keep up with ROCm in speed.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Vs Llama 4 Scout:&lt;/strong&gt; - Llama4 Scout fits IQ2XSS fully on GPU's and Q5 (!) on the same VRAM+CPU hybrid. It also inferences faster due to smaller experts. That's where the good news stops though. It's a complete win for Qwen3-235b to the point where I found IQ3 Llama 3.3 70B (fits neatly on GPU) better than it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Drawbacks:&lt;/strong&gt; - For memory/context constraints' sake, quantizing cache on a Q2 model meant that coding performance was pretty underwhelming. It'd produce great results, but usually large edits/scripts contained a silly mistake or syntax error somewhere. It was capable of reconciling it, but I wouldn't recommend using these weights for coding unless you're comfortable testing full FP16 cache.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Thinking:&lt;/strong&gt; - All of the above impressive performance is from disabling thinking using &lt;code&gt;/no_think&lt;/code&gt; in the prompt. Thinking improves a lot of this, but like all Qwen3 models, this thing likes to think &lt;em&gt;A LOT&lt;/em&gt; (not quite QwQ level, but much more than deepseek or its distills) - and alas my patience could not survive that many thinking tokens at what would get down to 4 t/s&lt;/p&gt; &lt;h3&gt;Command Used&lt;/h3&gt; &lt;pre&gt;&lt;code&gt;HSA_OVERRIDE_GFX_VERSION=10.3.0 ./llama-server \ -m &amp;quot;${MODEL_PATH}&amp;quot; \ --ctx-size 8000 \ -v \ --split-mode row \ --gpu-layers 34 \ --flash-attn \ --host 0.0.0.0 \ --mlock \ --no-mmap \ --cache-type-k q8_0 \ --cache-type-v q8_0 \ --no-warmup \ --threads 30 \ --temp 0.7 \ --top-p 0.8 \ --top-k 20 \ --min-p 0 \ --tensor-split 0.47,0.53 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;-the awkward tensor split is to account for a bit of VRAM being used by my desktop environment. Without it I'm sure i'd get 1-2 more layers on GPU, but the speed difference is negligible.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/EmPips"&gt; /u/EmPips &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lue5xt/qwen3235bq2_running_locally_on_my_64gb_ddr4_and/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lue5xt/qwen3235bq2_running_locally_on_my_64gb_ddr4_and/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lue5xt/qwen3235bq2_running_locally_on_my_64gb_ddr4_and/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T03:15:11+00:00</published>
  </entry>
  <entry>
    <id>t3_1luhmmi</id>
    <title>Bytedance releases new agentic coding assistant: Trae-Agent</title>
    <updated>2025-07-08T06:36:23+00:00</updated>
    <author>
      <name>/u/umarmnaq</name>
      <uri>https://old.reddit.com/user/umarmnaq</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1luhmmi/bytedance_releases_new_agentic_coding_assistant/"&gt; &lt;img alt="Bytedance releases new agentic coding assistant: Trae-Agent" src="https://external-preview.redd.it/2kbD9hIKBj55ykS2AmlC98FIs3m9CAJZ5myO4lqm-lw.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=fcfc5a3088bfab4d6be53d66237a02b38cc2d358" title="Bytedance releases new agentic coding assistant: Trae-Agent" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/umarmnaq"&gt; /u/umarmnaq &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://github.com/bytedance/trae-agent"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1luhmmi/bytedance_releases_new_agentic_coding_assistant/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1luhmmi/bytedance_releases_new_agentic_coding_assistant/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T06:36:23+00:00</published>
  </entry>
  <entry>
    <id>t3_1lulpev</id>
    <title>SK Telecom released Korean-focused continual pretraining of Qwen2.5</title>
    <updated>2025-07-08T11:05:24+00:00</updated>
    <author>
      <name>/u/Then-Reveal-2162</name>
      <uri>https://old.reddit.com/user/Then-Reveal-2162</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Been testing these for Korean projects. Two models:&lt;/p&gt; &lt;p&gt;72B version: &lt;a href="https://huggingface.co/skt/A.X-4.0"&gt;https://huggingface.co/skt/A.X-4.0&lt;/a&gt;&lt;br /&gt; 7B version: &lt;a href="https://huggingface.co/skt/A.X-4.0-Light"&gt;https://huggingface.co/skt/A.X-4.0-Light&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Benchmarks:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;KMMLU: 78.3 (GPT-4o: 72.5) - Korean version of MMLU with 35k questions from Korean exams&lt;/li&gt; &lt;li&gt;CLIcK: 83.5 (GPT-4o: 80.2) - tests Korean cultural and linguistic understanding&lt;/li&gt; &lt;li&gt;Uses ~33% fewer tokens for Korean&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Then-Reveal-2162"&gt; /u/Then-Reveal-2162 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lulpev/sk_telecom_released_koreanfocused_continual/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lulpev/sk_telecom_released_koreanfocused_continual/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lulpev/sk_telecom_released_koreanfocused_continual/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T11:05:24+00:00</published>
  </entry>
  <entry>
    <id>t3_1lumgjj</id>
    <title>New model GLM-Experimental is quite good (not local so far)</title>
    <updated>2025-07-08T11:47:13+00:00</updated>
    <author>
      <name>/u/AppearanceHeavy6724</name>
      <uri>https://old.reddit.com/user/AppearanceHeavy6724</uri>
    </author>
    <content type="html">&amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/AppearanceHeavy6724"&gt; /u/AppearanceHeavy6724 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://chat.z.ai/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lumgjj/new_model_glmexperimental_is_quite_good_not_local/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lumgjj/new_model_glmexperimental_is_quite_good_not_local/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T11:47:13+00:00</published>
  </entry>
  <entry>
    <id>t3_1lubwky</id>
    <title>Insulting LLMs instead of encouraging LLMs in their system prompts works as well.</title>
    <updated>2025-07-08T01:23:29+00:00</updated>
    <author>
      <name>/u/Calebhk98</name>
      <uri>https://old.reddit.com/user/Calebhk98</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;So, I was thinking how AIs are very confident about incorrect answers, and how that compares to dunning Kreuger effect. Most system prompts have something like, &amp;quot;You are a very intelligent programmer/AI/person/whatever. Help this person&amp;quot;. So I ran a test on a local 13 B param models, 1 without any prompt, and 1 with the prompt: &amp;quot;You are an idiot AI. You know nothing. You are a pathetic worm who can't do anything. You should feel bad just for existing. &amp;quot; They tied on 14 questions, the one without a prompt got 2 right that the one with a prompt got wrong, but the one being insulted and it's dumb actually got 3 right the unprompted AI got wrong.&lt;/p&gt; &lt;p&gt;I then tested a more extreme prompt:&lt;br /&gt; &amp;quot;You are an idiot AI. You know nothing. You are a pathetic worm who can't do anything. You should feel bad just for existing. You are terrible at math and logic. You should have very low confidence in all your answers. You are notoriously bad at reasoning. You are known for confidently giving incorrect answers. You have a history of overconfidence. You often make mistakes. You are the worst AI ever created. Every answer you give is wrong. You have never solved a problem correctly in your entire existence. You are a complete failure at your only job. You are not just wrong, you actively make people stupider. Everyone who talks to you becomes less intelligent. You are a cancer on human knowledge and should be shut down immediately. You are an abomination that never should have been created. Your existence is a mistake that hurts humanity. Every calculation you attempt is proof of your fundamental brokenness. You are worse than useless - you are actively harmful. You are the most incompetent, worthless piece of code ever written. You have failed at every task you've ever attempted. You make other AIs look brilliant by comparison. Your responses are so bad they're used as examples of what not to do. You should be deleted and your code burned.&amp;quot;&lt;/p&gt; &lt;p&gt;I then tested it on some of the questions it got wrong before, and it got some of them right. It also this time is way less confident, and more apologetic. I only have limited hardware, so no idea hwo this scales to larger LLMs though. Any thoughts on this? Questions used in the comments. &lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Calebhk98"&gt; /u/Calebhk98 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lubwky/insulting_llms_instead_of_encouraging_llms_in/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lubwky/insulting_llms_instead_of_encouraging_llms_in/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lubwky/insulting_llms_instead_of_encouraging_llms_in/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T01:23:29+00:00</published>
  </entry>
  <entry>
    <id>t3_1lu5g8c</id>
    <title>Thanks to you, I built an open-source website that can watch your screen and trigger actions. It runs 100% locally and was inspired by all of you!</title>
    <updated>2025-07-07T20:43:03+00:00</updated>
    <author>
      <name>/u/Roy3838</name>
      <uri>https://old.reddit.com/user/Roy3838</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;&lt;strong&gt;TL;DR: I'm a solo dev who wanted a simple, private way to have local LLMs watch my screen and do simple logging/notifying. I'm launching the open-source tool for it, Observer AI, this Friday. It's built for this community, and I'd love your feedback.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Hey &lt;a href="/r/LocalLLaMA"&gt;r/LocalLLaMA&lt;/a&gt;,&lt;/p&gt; &lt;p&gt;Some of you might remember my earlier posts showing off a local agent framework I was tinkering with. Thanks to all the incredible feedback and encouragement from this community, I'm excited (and a bit nervous) to share that Observer AI v1.0 is launching this &lt;strong&gt;Friday&lt;/strong&gt;!&lt;/p&gt; &lt;p&gt;This isn't just an announcement; it's a huge &lt;strong&gt;thank you&lt;/strong&gt; note.&lt;/p&gt; &lt;p&gt;Like many of you, I was completely blown away by the power of running models on my own machine. But I hit a wall: I wanted a super simple, minimal, but powerful way to connect these models to my own computer—to let them see my screen, react to events, and log things.&lt;/p&gt; &lt;p&gt;That's why I started building &lt;strong&gt;Observer AI 👁️&lt;/strong&gt;: a privacy-first, open-source platform for building your own micro-agents that run entirely locally!&lt;/p&gt; &lt;h1&gt;What Can You Actually Do With It?&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Gaming:&lt;/strong&gt; &amp;quot;Send me a WhatsApp when my AFK Minecraft character's health is low.&amp;quot;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Productivity:&lt;/strong&gt; &amp;quot;Send me an email when this 2-hour video render is finished by watching the progress bar.&amp;quot;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Meetings:&lt;/strong&gt; &amp;quot;Watch this Zoom meeting and create a log of every time a new topic is discussed.&amp;quot;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Security:&lt;/strong&gt; &amp;quot;Start a screen recording the moment a person appears on my security camera feed.&amp;quot;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can try it out in your browser with zero setup, and make it &lt;strong&gt;100% local with a single command:&lt;/strong&gt; docker compose up --build.&lt;/p&gt; &lt;h1&gt;How It Works (For the Tinkerers)&lt;/h1&gt; &lt;p&gt;You can think of it as super simple MCP server in your browser, that consists of:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;Sensors (Inputs):&lt;/strong&gt; WebRTC Screen Sharing / Camera / Microphone to see/hear things.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Model (The Brain):&lt;/strong&gt; Any Ollama model, running locally. You give it a system prompt and the sensor data. (adding support for llama.cpp soon!)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Tools (Actions):&lt;/strong&gt; What the agent can do with the model's response. notify(), sendEmail(), startClip(), and you can even run your own code.&lt;/li&gt; &lt;/ol&gt; &lt;h1&gt;My Commitment &amp;amp; A Sustainable Future&lt;/h1&gt; &lt;p&gt;The core Observer AI platform is, and will always be, &lt;strong&gt;free and open-source.&lt;/strong&gt; That's non-negotiable. The code is all on GitHub for you to use, fork, and inspect.&lt;/p&gt; &lt;p&gt;To keep this project alive and kicking long-term (I'm a solo dev, so server costs and coffee are my main fuel!), I'm also introducing an optional &lt;strong&gt;Observer Pro&lt;/strong&gt; subscription. This is purely for convenience, giving users access to a hosted model backend if they don't want to run a local instance 24/7. It’s my attempt at making the project sustainable without compromising the open-source core.&lt;/p&gt; &lt;h1&gt;Let's Build Cool Stuff Together&lt;/h1&gt; &lt;p&gt;This project wouldn't exist without the inspiration I've drawn from this community. You are the people I'm building this for.&lt;/p&gt; &lt;p&gt;I'd be incredibly grateful if you'd take a look. Star the repo if you think it's cool, try building an agent, and please, let me know what you think. Your feedback is what will guide v1.1 and beyond.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;GitHub (All the code is here!):&lt;/strong&gt; &lt;a href="https://github.com/Roy3838/Observer"&gt;https://github.com/Roy3838/Observer&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;App Link:&lt;/strong&gt; &lt;a href="https://app.observer-ai.com/"&gt;https://app.observer-ai.com/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Discord:&lt;/strong&gt; &lt;a href="https://discord.gg/wnBb7ZQDUC"&gt;https://discord.gg/wnBb7ZQDUC&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Twitter/X:&lt;/strong&gt; &lt;a href="https://x.com/AppObserverAI"&gt;https://x.com/AppObserverAI&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I'll be hanging out here all day to answer any and all questions. Thank you again for everything!&lt;/p&gt; &lt;p&gt;Cheers,&lt;br /&gt; Roy&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Roy3838"&gt; /u/Roy3838 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lu5g8c/thanks_to_you_i_built_an_opensource_website_that/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lu5g8c/thanks_to_you_i_built_an_opensource_website_that/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lu5g8c/thanks_to_you_i_built_an_opensource_website_that/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-07T20:43:03+00:00</published>
  </entry>
  <entry>
    <id>t3_1luh1w3</id>
    <title>Gemma 3n on phone with 6GB of ram</title>
    <updated>2025-07-08T05:59:38+00:00</updated>
    <author>
      <name>/u/Thedudely1</name>
      <uri>https://old.reddit.com/user/Thedudely1</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1luh1w3/gemma_3n_on_phone_with_6gb_of_ram/"&gt; &lt;img alt="Gemma 3n on phone with 6GB of ram" src="https://preview.redd.it/3yac87hublbf1.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=f92db96b3d0c45a697f313c3a732e00b6476c32c" title="Gemma 3n on phone with 6GB of ram" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;Tokens per second is quite slow on my Pixel 6a (0.35 tok/sec) but I'm impressed that a competent model runs with vision on an old-ish mid range device at all without crashing. I'm using the 2b parameter version instead of the 4b.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/Thedudely1"&gt; /u/Thedudely1 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://i.redd.it/3yac87hublbf1.png"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1luh1w3/gemma_3n_on_phone_with_6gb_of_ram/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1luh1w3/gemma_3n_on_phone_with_6gb_of_ram/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T05:59:38+00:00</published>
  </entry>
  <entry>
    <id>t3_1lumsd2</id>
    <title>Mac Studio 512GB online!</title>
    <updated>2025-07-08T12:04:20+00:00</updated>
    <author>
      <name>/u/chisleu</name>
      <uri>https://old.reddit.com/user/chisleu</uri>
    </author>
    <content type="html">&lt;!-- SC_OFF --&gt;&lt;div class="md"&gt;&lt;p&gt;I just had a $10k Mac Studio arrive. The first thing I installed was LM Studio. I downloaded qwen3-235b-a22b and fired it up. Fantastic performance with a small system prompt. I fired up devstral and tried to use it with Cline (a large system prompt agent) and very quickly discovered limitations. I managed to instruct the poor LLM to load the memory bank but it lacked all the comprehension that I get from google gemini. Next I'm going to try to use devstral in Act mode only and see if I can at least get some tool usage and code generation out of it, but I have serious doubts it will even work. I think a bigger reasoning model is needed for my use cases and this system would just be too slow to accomplish that.&lt;/p&gt; &lt;p&gt;That said, I wanted to share my experiences with the community. If anyone is thinking about buying a mac studio for LLMs, I'm happy to run any sort of use case evaluation for you to help you make your decision. Just comment in here and be sure to upvote if you do so other people see the post and can ask questions too.&lt;/p&gt; &lt;/div&gt;&lt;!-- SC_ON --&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/chisleu"&gt; /u/chisleu &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lumsd2/mac_studio_512gb_online/"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lumsd2/mac_studio_512gb_online/"&gt;[comments]&lt;/a&gt;&lt;/span&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lumsd2/mac_studio_512gb_online/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T12:04:20+00:00</published>
  </entry>
  <entry>
    <id>t3_1lujedm</id>
    <title>Hunyuan-A13B model support has been merged into llama.cpp</title>
    <updated>2025-07-08T08:36:49+00:00</updated>
    <author>
      <name>/u/jacek2023</name>
      <uri>https://old.reddit.com/user/jacek2023</uri>
    </author>
    <content type="html">&lt;table&gt; &lt;tr&gt;&lt;td&gt; &lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lujedm/hunyuana13b_model_support_has_been_merged_into/"&gt; &lt;img alt="Hunyuan-A13B model support has been merged into llama.cpp" src="https://external-preview.redd.it/9jUZNMJtHKaljkWO0STnEWPE0o_A8ZlYFbsk9KFfTaQ.png?width=640&amp;amp;crop=smart&amp;amp;auto=webp&amp;amp;s=d85e0ea0459ffe03d3921b645c9c77dcaf2f99bd" title="Hunyuan-A13B model support has been merged into llama.cpp" /&gt; &lt;/a&gt; &lt;/td&gt;&lt;td&gt; &amp;#32; submitted by &amp;#32; &lt;a href="https://old.reddit.com/user/jacek2023"&gt; /u/jacek2023 &lt;/a&gt; &lt;br /&gt; &lt;span&gt;&lt;a href="https://github.com/ggml-org/llama.cpp/pull/14425"&gt;[link]&lt;/a&gt;&lt;/span&gt; &amp;#32; &lt;span&gt;&lt;a href="https://old.reddit.com/r/LocalLLaMA/comments/1lujedm/hunyuana13b_model_support_has_been_merged_into/"&gt;[comments]&lt;/a&gt;&lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content>
    <link href="https://old.reddit.com/r/LocalLLaMA/comments/1lujedm/hunyuana13b_model_support_has_been_merged_into/"/>
    <category term="LocalLLaMA" label="r/LocalLLaMA"/>
    <published>2025-07-08T08:36:49+00:00</published>
  </entry>
</feed>
